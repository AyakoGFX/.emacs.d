(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[[nil nil #105=(headline (:raw-value #1="Emacs Reference Config i use" :begin 53 :end 415 :pre-blank 0 :contents-begin 84 :contents-end 414 :robust-begin 86 :robust-end 412 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 53 :title #1# :mode nil :granularity element :cached t :parent #4=(org-data (:begin 1 :contents-begin 1 :contents-end 63732 :end 63734 :robust-begin 3 :robust-end 63730 :post-blank 2 :post-affiliated 1 :path "c:/Users/ayako/AppData/Roaming/.emacs.d/config.org" :mode org-data :CATEGORY "config" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #107=(headline (:raw-value #2="Theme" :begin 428 :end 1044 :pre-blank 0 :contents-begin 437 :contents-end 1043 :robust-begin 439 :robust-end 1041 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 428 :title #2# :mode section :granularity element :cached t :parent #5=(headline (:raw-value #3="Appearance" :begin 415 :end 1382 :pre-blank 0 :contents-begin 428 :contents-end 1381 :robust-begin 430 :robust-end 1379 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 415 :title #3# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #5# 0] [[nil nil #110=(headline (:raw-value #6="colorful-mode" :begin 1259 :end 1382 :pre-blank 0 :contents-begin 1276 :contents-end 1381 :robust-begin 1278 :robust-end 1379 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1259 :title #6# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #5#)) 0] [nil nil #112=(headline (:raw-value #7="dashboard" :begin 1655 :end 2092 :pre-blank 0 :contents-begin 1668 :contents-end 2092 :robust-begin 1670 :robust-end 2090 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1655 :title #7# :mode nil :granularity element :cached t :parent #9=(headline (:raw-value #8="Madeline" :begin 1382 :end 2092 :pre-blank 0 :contents-begin 1393 :contents-end 2092 :robust-begin 1395 :robust-end 2090 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1382 :title #8# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #9# 0] #109=(headline (:raw-value #10="Font" :begin 1044 :end 1259 :pre-blank 0 :contents-begin 1052 :contents-end 1259 :robust-begin 1054 :robust-end 1257 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1044 :title #10# :parent #5# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [[[nil nil #14=(headline (:raw-value #11="Remove lame startup screen" :begin 2119 :end 2893 :pre-blank 0 :contents-begin 2149 :contents-end 2892 :robust-begin 2151 :robust-end 2890 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2119 :title #11# :mode section :granularity element :cached t :parent #22=(headline (:raw-value #12="Basic Interface Settings" :begin 2092 :end 2893 :pre-blank 0 :contents-begin 2119 :contents-end 2892 :robust-begin 2121 :robust-end 2890 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2092 :title #12# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #119=(headline (:raw-value #13="Disable bell" :begin 2483 :end 2652 :pre-blank 0 :contents-begin 2500 :contents-end 2651 :robust-begin 2502 :robust-end 2649 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2483 :title #13# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] #116=(headline (:raw-value #15="Disable menus and scroll-bars" :begin 2298 :end 2483 :pre-blank 0 :contents-begin 2332 :contents-end 2482 :robust-begin 2334 :robust-end 2480 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2298 :title #15# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] [[nil nil #19=(headline (:raw-value #16="window management" :begin 2893 :end 9258 :pre-blank 0 :contents-begin 2913 :contents-end 9257 :robust-begin 2915 :robust-end 9255 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2893 :title #16# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [nil nil #124=(headline (:raw-value #17="Disable backups and auto-saves" :begin 3060 :end 3492 :pre-blank 0 :contents-begin 3095 :contents-end 3492 :robust-begin 3097 :robust-end 3490 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3060 :title #17# :mode section :granularity element :cached t :parent #20=(headline (:raw-value #18="Functionality" :begin 3043 :end 7488 :pre-blank 0 :contents-begin 3060 :contents-end 7487 :robust-begin 3062 :robust-end 7485 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3043 :title #18# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #20# 0] #121=(headline (:raw-value #21="Set UTF-8 encoding" :begin 2652 :end 2893 :pre-blank 0 :contents-begin 2675 :contents-end 2892 :robust-begin 2677 :robust-end 2890 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2652 :title #21# :mode nil :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) 0] #22# 0] [[[[nil nil #127=(headline (:raw-value #23="visual-block mode for emacs" :begin 3696 :end 5295 :pre-blank 0 :contents-begin 3728 :contents-end 5294 :robust-begin 3730 :robust-end 5292 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3696 :title #23# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [nil nil #131=(headline (:raw-value #24="World clock" :begin 5370 :end 5670 :pre-blank 0 :contents-begin 5386 :contents-end 5670 :robust-begin 5388 :robust-end 5668 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5370 :title #24# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] #129=(headline (:raw-value #25="word wrap" :begin 5295 :end 5370 :pre-blank 0 :contents-begin 5309 :contents-end 5370 :robust-begin 5311 :robust-end 5368 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5295 :title #25# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [[nil nil #134=(headline (:raw-value #26="recent-files" :begin 5834 :end 6113 :pre-blank 0 :contents-begin 5851 :contents-end 6112 :robust-begin 5853 :robust-end 6110 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5834 :title #26# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [nil nil #138=(headline (:raw-value #27="sudo edit" :begin 6549 :end 6667 :pre-blank 0 :contents-begin 6563 :contents-end 6666 :robust-begin 6565 :robust-end 6664 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6549 :title #27# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] #137=(headline (:raw-value #28="On relative line numbers" :begin 6113 :end 6549 :pre-blank 0 :contents-begin 6142 :contents-end 6549 :robust-begin 6144 :robust-end 6547 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6113 :title #28# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] #133=(headline (:raw-value #29="Change yes-or-no questions into y-or-n questions" :begin 5670 :end 5834 :pre-blank 1 :contents-begin 5724 :contents-end 5834 :robust-begin 5726 :robust-end 5832 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5670 :title #29# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [[[nil nil #143=(headline (:raw-value #30="Prevent using UI dialog's for prompts" :begin 7101 :end 7488 :pre-blank 0 :contents-begin 7143 :contents-end 7487 :robust-begin 7145 :robust-end 7485 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7101 :title #30# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [nil nil #147=(headline (:raw-value #31="Cool Icons" :begin 8622 :end 9001 :pre-blank 0 :contents-begin 8636 :contents-end 9000 :robust-begin 8638 :robust-end 8998 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8622 :title #31# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] #145=(headline (:raw-value #32="Automatically revert buffers for changed files" :begin 7488 :end 8622 :pre-blank 0 :contents-begin 7538 :contents-end 8621 :robust-begin 7540 :robust-end 8619 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7488 :title #32# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] [[nil nil #36=(headline (:raw-value #33="Dired" :begin 9258 :end 25747 :pre-blank 0 :contents-begin 9267 :contents-end 25747 :robust-begin 9269 :robust-end 25745 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9258 :title #33# :parent #4# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [nil nil #152=(headline (:raw-value #34="vertigo" :begin 11893 :end 13669 :pre-blank 0 :contents-begin 11905 :contents-end 13669 :robust-begin 11907 :robust-end 13667 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11893 :title #34# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #37=(headline (:raw-value #35="Completion" :begin 11879 :end 21297 :pre-blank 0 :contents-begin 11893 :contents-end 21297 :robust-begin 11895 :robust-end 21295 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11879 :title #35# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #36#)))) 0] #37# 0] #149=(headline (:raw-value #38="copy current line to the clipboard" :begin 9001 :end 9258 :pre-blank 0 :contents-begin 9039 :contents-end 9257 :robust-begin 9041 :robust-end 9255 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9001 :title #38# :mode nil :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] #141=(headline (:raw-value #39="Remembering the last place you visited in a file" :begin 6667 :end 7101 :pre-blank 0 :contents-begin 6720 :contents-end 7100 :robust-begin 6722 :robust-end 7098 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6667 :title #39# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] #126=(headline (:raw-value #40="move text up down" :begin 3492 :end 3696 :pre-blank 0 :contents-begin 3514 :contents-end 3695 :robust-begin 3516 :robust-end 3693 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3492 :title #40# :mode nil :granularity element :cached t :parent #20# :org-element--cache-sync-key nil)) 0] [[[[nil nil #155=(headline (:raw-value #41="orderless" :begin 13832 :end 14497 :pre-blank 0 :contents-begin 13846 :contents-end 14496 :robust-begin 13848 :robust-end 14494 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13832 :title #41# :mode nil :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) 0] [nil nil #159=(headline (:raw-value #42="corfu compilation for org roam node auto-complete" :begin 14644 :end 16143 :pre-blank 0 :contents-begin 14698 :contents-end 16143 :robust-begin 14700 :robust-end 16141 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14644 :title #42# :mode nil :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) 0] #157=(headline (:raw-value #43="ido-mode" :begin 14497 :end 14644 :pre-blank 0 :contents-begin 14510 :contents-end 14643 :robust-begin 14512 :robust-end 14641 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14497 :title #43# :mode nil :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) 0] [[nil nil #163=(headline (:raw-value #44="which-key" :begin 21297 :end 21420 :pre-blank 0 :contents-begin 21310 :contents-end 21419 :robust-begin 21312 :robust-end 21417 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21297 :title #44# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] [nil nil #169=(headline (:raw-value #45="VTerm" :begin 22812 :end 23815 :pre-blank 0 :contents-begin 22821 :contents-end 23814 :robust-begin 22823 :robust-end 23812 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 22812 :title #45# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] #164=(headline (:raw-value #46="embark" :begin 21420 :end 22812 :pre-blank 0 :contents-begin 21430 :contents-end 22812 :robust-begin 21432 :robust-end 22810 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21420 :title #46# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] #161=(headline (:raw-value #47="consult-ripgrep" :begin 16143 :end 21297 :pre-blank 0 :contents-begin 16163 :contents-end 21297 :robust-begin 16165 :robust-end 21295 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16143 :title #47# :mode nil :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) 0] [[[nil nil #172=(headline (:raw-value #48="undo-tree vundo" :begin 23930 :end 25317 :pre-blank 0 :contents-begin 23949 :contents-end 25316 :robust-begin 23951 :robust-end 25314 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23930 :title #48# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] [nil nil #175=(headline (:raw-value #49="key-map" :begin 25747 :end 28372 :pre-blank 0 :contents-begin 25757 :contents-end 28371 :robust-begin 25759 :robust-end 28369 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25747 :title #49# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] #174=(headline (:raw-value #50="multiple cursors" :begin 25317 :end 25747 :pre-blank 0 :contents-begin 25337 :contents-end 25747 :robust-begin 25339 :robust-end 25745 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25317 :title #50# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] [[nil nil #179=(headline (:raw-value #51="diff-hl" :begin 28826 :end 28980 :pre-blank 0 :contents-begin 28838 :contents-end 28980 :robust-begin 28840 :robust-end 28978 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 28826 :title #51# :mode nil :granularity element :cached t :parent #56=(headline (:raw-value #52="Magit & git tools" :begin 28372 :end 28980 :pre-blank 0 :contents-begin 28392 :contents-end 28980 :robust-begin 28394 :robust-end 28978 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 28372 :title #52# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #104=(headline (:raw-value #53="lsp-mode" :begin 28986 :end 31913 :pre-blank 0 :contents-begin 28998 :contents-end 31913 :robust-begin 29000 :robust-end 31911 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 28986 :title #53# :mode section :granularity element :cached t :parent #55=(headline (:raw-value #54="Dev" :begin 28980 :end 31913 :pre-blank 0 :contents-begin 28986 :contents-end 31913 :robust-begin 28988 :robust-end 31911 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 28980 :title #54# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #55# 0] #56# 0] #171=(headline (:raw-value #57="ibuffer" :begin 23815 :end 23930 :pre-blank 0 :contents-begin 23826 :contents-end 23929 :robust-begin 23828 :robust-end 23927 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 23815 :title #57# :mode nil :granularity element :cached t :parent #36# :org-element--cache-sync-key nil)) 0] #153=(headline (:raw-value #58="marginalia" :begin 13669 :end 13832 :pre-blank 0 :contents-begin 13684 :contents-end 13832 :robust-begin 13686 :robust-end 13830 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13669 :title #58# :mode nil :granularity element :cached t :parent #37# :org-element--cache-sync-key nil)) -1] [[[[[nil nil #61=(headline (:raw-value #59="eglot" :begin 31913 :end 33379 :pre-blank 0 :contents-begin 31922 :contents-end 33379 :robust-begin 31924 :robust-end 33377 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 31913 :title #59# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [nil nil #186=(headline (:raw-value #60="wk-mode for whick-key for window manager" :begin 33243 :end 33379 :pre-blank 0 :contents-begin 33287 :contents-end 33379 :robust-begin 33289 :robust-end 33377 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33243 :title #60# :mode nil :granularity element :cached t :parent #61# :org-element--cache-sync-key nil)) 0] #184=(headline (:raw-value #62="lsp for shell scripting" :begin 33079 :end 33243 :pre-blank 0 :contents-begin 33107 :contents-end 33243 :robust-begin 33109 :robust-end 33241 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33079 :title #62# :mode nil :granularity element :cached t :parent #61# :org-element--cache-sync-key nil)) 0] [[nil nil #188=(headline (:raw-value #63="app to install" :begin 33764 :end 34711 :pre-blank 0 :contents-begin 33784 :contents-end 34709 :robust-begin 33786 :robust-end 34707 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33764 :title #63# :mode nil :granularity element :cached t :parent #66=(headline (:raw-value #64="python" :begin 33379 :end 35293 :pre-blank 0 :contents-begin 33388 :contents-end 35293 :robust-begin 33390 :robust-end 35291 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 33379 :title #64# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #192=(headline (:raw-value #65="nix mode" :begin 34800 :end 35293 :pre-blank 0 :contents-begin 34814 :contents-end 35293 :robust-begin 34816 :robust-end 35291 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 34800 :title #65# :mode nil :granularity element :cached t :parent #66# :org-element--cache-sync-key nil)) 0] #190=(headline (:raw-value #67="lua-mode" :begin 34711 :end 34800 :pre-blank 0 :contents-begin 34727 :contents-end 34799 :robust-begin 34729 :robust-end 34797 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 34711 :title #67# :mode nil :granularity element :cached t :parent #66# :org-element--cache-sync-key nil)) 0] #66# 0] [[[nil nil #194=(headline (:raw-value #68="use bash instead of other shells" :begin 35536 :end 35865 :pre-blank 0 :contents-begin 35572 :contents-end 35864 :robust-begin 35574 :robust-end 35862 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 35536 :title #68# :mode nil :granularity element :cached t :parent #80=(headline (:raw-value #69="fixs" :begin 35293 :end 35865 :pre-blank 0 :contents-begin 35300 :contents-end 35864 :robust-begin 35302 :robust-end 35862 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 35293 :title #69# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [[nil nil #197=(headline (:raw-value #70="Denote" :begin 35879 :end 35889 :pre-blank 0 :contents-begin nil :contents-end nil :robust-begin nil :robust-end nil :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 35879 :title #70# :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #73=(headline (:raw-value #71="Note Taking" :begin 35865 :end 35889 :pre-blank 0 :contents-begin 35879 :contents-end 35889 :robust-begin 35881 :robust-end 35887 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 35865 :title #71# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #4#)))) 0] nil #75=(headline (:raw-value #72="https://github.com/pprevos/denote-explore.git" :begin 35889 :end 53137 :pre-blank 0 :contents-begin 35942 :contents-end 53136 :robust-begin 35944 :robust-end 53134 :level 1 :priority nil :tags nil :todo-keyword #("TODO" 0 4 (fontified nil)) :todo-type todo :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 35889 :title #72# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) -1] #73# 1] [[nil nil #77=(headline (:raw-value #74="Pure Org" :begin 43791 :end 46732 :pre-blank 0 :contents-begin 43803 :contents-end 46732 :robust-begin 43805 :robust-end 46730 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 43791 :title #74# :mode nil :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) 0] [nil nil #204=(headline (:raw-value #76="mixed-pitch font" :begin 46295 :end 46529 :pre-blank 0 :contents-begin 46316 :contents-end 46529 :robust-begin 46318 :robust-end 46527 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46295 :title #76# :mode nil :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) 0] #202=(headline (:raw-value #78="org-agenda" :begin 46008 :end 46295 :pre-blank 0 :contents-begin 46023 :contents-end 46295 :robust-begin 46025 :robust-end 46293 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46008 :title #78# :mode nil :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) 0] #200=(headline (:raw-value #79="tools i use with org-mode" :begin 43458 :end 43791 :pre-blank 0 :contents-begin 43487 :contents-end 43791 :robust-begin 43489 :robust-end 43789 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 43458 :title #79# :mode nil :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) -1] #80# 1] [[[[nil nil #83=(headline (:raw-value #81="org roam" :begin 46732 :end 52586 :pre-blank 0 :contents-begin 46744 :contents-end 52586 :robust-begin 46746 :robust-end 52584 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46732 :title #81# :mode nil :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) 0] [nil nil #211=(headline (:raw-value #82="org-roam-ui" :begin 51969 :end 52586 :pre-blank 0 :contents-begin 51985 :contents-end 52586 :robust-begin 51987 :robust-end 52584 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 51969 :title #82# :mode nil :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) 0] #209=(headline (:raw-value #84="Font sizes and colors for Org mode headers using Doom One theme colors" :begin 51188 :end 51969 :pre-blank 0 :contents-begin 51264 :contents-end 51969 :robust-begin 51266 :robust-end 51967 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 51188 :title #84# :mode nil :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) 0] [[nil nil #87=(headline (:raw-value #85="Emacs for writers" :begin 53137 :end 54991 :pre-blank 0 :contents-begin 53159 :contents-end 54990 :robust-begin 53161 :robust-end 54988 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 53137 :title #85# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [nil nil #218=(headline (:raw-value #86="visual-fill-column" :begin 54677 :end 54991 :pre-blank 0 :contents-begin 54699 :contents-end 54990 :robust-begin 54701 :robust-end 54988 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 54677 :title #86# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #87#)) 0] #216=(headline (:raw-value #88="spellcheck with jinx aka just-in-time" :begin 53159 :end 54677 :pre-blank 0 :contents-begin 53200 :contents-end 54676 :robust-begin 53202 :robust-end 54674 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 53159 :title #88# :parent #87# :cached t :org-element--cache-sync-key nil :granularity element)) 0] #213=(headline (:raw-value #89="LaTeX" :begin 52586 :end 53137 :pre-blank 0 :contents-begin 52595 :contents-end 53136 :robust-begin 52597 :robust-end 53134 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 52586 :title #89# :mode nil :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) 0] [[[nil nil #93=(headline (:raw-value #90="ditched Perspective.el for =M-x tab-bar-mode=" :begin 56211 :end 57407 :pre-blank 0 :contents-begin 56259 :contents-end 57406 :robust-begin 56261 :robust-end 57404 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 56211 :title #90# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [nil nil #100=(headline (:raw-value #91="tab-bar-mode" :begin 57407 :end 59627 :pre-blank 0 :contents-begin 57422 :contents-end 59627 :robust-begin 57424 :robust-end 59625 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 57407 :title #91# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] #222=(headline (:raw-value #92="optionla of you use consult-buffer for Perspective.el" :begin 56501 :end 57407 :pre-blank 0 :contents-begin 56559 :contents-end 57406 :robust-begin 56561 :robust-end 57404 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 56501 :title #92# :mode nil :granularity element :cached t :parent #93# :org-element--cache-sync-key nil)) 0] [[nil nil #227=(headline (:raw-value #94="beframe workspace like stuff" :begin 59627 :end 60919 :pre-blank 0 :contents-begin 59659 :contents-end 60918 :robust-begin 59661 :robust-end 60916 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 59627 :title #94# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [[nil nil #230=(headline (:raw-value #95="irc with erc" :begin 61589 :end 62894 :pre-blank 0 :contents-begin 61604 :contents-end 62893 :robust-begin 61606 :robust-end 62891 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 61589 :title #95# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [nil nil #233=(headline (:raw-value #96="deb dep" :begin 63395 :end 63734 :pre-blank 0 :contents-begin 63405 :contents-end 63732 :robust-begin 63407 :robust-end 63730 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 63395 :title #96# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] #232=(headline (:raw-value #97="TODO" :begin 62894 :end 63395 :pre-blank 0 :contents-begin 62901 :contents-end 63394 :robust-begin 62903 :robust-end 63392 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 62894 :title #97# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] #228=(headline (:raw-value #98="YouTube stuff" :begin 60919 :end 61589 :pre-blank 0 :contents-begin 60935 :contents-end 61588 :robust-begin 60937 :robust-end 61586 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 60919 :title #98# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 1] #225=(headline (:raw-value #99="optionla of you use consult-buffer for tab-bar-mode" :begin 58712 :end 59627 :pre-blank 0 :contents-begin 58768 :contents-end 59627 :robust-begin 58770 :robust-end 59625 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 58712 :title #99# :mode nil :granularity element :cached t :parent #100# :org-element--cache-sync-key nil)) 1] #220=(headline (:raw-value #101="Optimizing" :begin 54991 :end 56211 :pre-blank 0 :contents-begin 55004 :contents-end 56210 :robust-begin 55006 :robust-end 56208 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 54991 :title #101# :mode nil :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 1] #205=(headline (:raw-value #102="org-downloaded" :begin 46529 :end 46732 :pre-blank 0 :contents-begin 46548 :contents-end 46732 :robust-begin 46550 :robust-end 46730 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 46529 :title #102# :mode nil :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) 0] #182=(headline (:raw-value #103="A guide on disabling/enabling lsp-mode features" :begin 29202 :end 31913 :pre-blank 0 :contents-begin 29254 :contents-end 31913 :robust-begin 29256 :robust-end 31911 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 29202 :title #103# :mode nil :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[[nil nil #4# 0] [nil nil #105# 0] (section (:begin 1 :end 53 :contents-begin 1 :contents-end 52 :robust-begin 1 :robust-end 50 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 84 :end 335 :contents-begin 84 :contents-end 334 :post-blank 1 :post-affiliated 84 :mode planning :granularity element :cached t :parent #106=(section (:begin 84 :end 415 :contents-begin 84 :contents-end 414 :robust-begin 84 :robust-end 412 :post-blank 1 :post-affiliated 84 :mode section :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #5# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 335 :end 415 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(add-to-list 'load-path \"~/.emacs.d/manual/\")\12" :post-blank 1 :post-affiliated 335 :mode nil :granularity element :cached t :parent #106# :org-element--cache-sync-key nil)) 0] #106# 0] [[[nil nil #108=(section (:begin 437 :end 1044 :contents-begin 437 :contents-end 1043 :robust-begin 437 :robust-end 1041 :post-blank 1 :post-affiliated 437 :mode section :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 577 :end 1044 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package doom-themes\12      :if window-system\12      :ensure t\12      ;; :init (load-theme 'doom-molokai t)\12      :config\12      (doom-themes-org-config)\12      (doom-themes-visual-bell-config)\12      (menu-bar-mode -1)\12      (tool-bar-mode -1)\12      (fringe-mode -1)\12      (scroll-bar-mode -1))\12    (setq frame-resize-pixelwise t)\12\12    (use-package catppuccin-theme\12      :ensure t)\12  ;; Load theme\12  ;; (load-theme 'doom-one t)\12\12" :post-blank 1 :post-affiliated 577 :mode nil :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 437 :end 577 :contents-begin 437 :contents-end 577 :post-blank 0 :post-affiliated 437 :mode planning :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) 0] [[nil nil #111=(section (:begin 1052 :end 1259 :contents-begin 1052 :contents-end 1259 :robust-begin 1052 :robust-end 1257 :post-blank 0 :post-affiliated 1052 :mode section :granularity element :cached t :parent #109# :org-element--cache-sync-key nil)) 0] [nil nil #110# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1052 :end 1259 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (add-to-list 'default-frame-alist\12  ;; \11     '(font . \"JetBrainsMono Nerd Font-50\"))\12  (set-face-attribute 'default nil :font \"Courier New\" :height 160) ;; fow windows\12\12" :post-blank 0 :post-affiliated 1052 :mode planning :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] #109# 0] #107# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1276 :end 1382 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package colorful-mode\12  :ensure t\12  :hook (prog-mode text-mode))  \12" :post-blank 1 :post-affiliated 1276 :mode planning :granularity element :cached t :parent #118=(section (:begin 1276 :end 1382 :contents-begin 1276 :contents-end 1381 :robust-begin 1276 :robust-end 1379 :post-blank 1 :post-affiliated 1276 :mode section :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #114=(section (:begin 1393 :end 1655 :contents-begin 1393 :contents-end 1654 :robust-begin 1393 :robust-end 1652 :post-blank 1 :post-affiliated 1393 :mode section :granularity element :cached t :parent #9# :org-element--cache-sync-key nil)) 0] #9# 0] [[nil nil #112# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1668 :end 2092 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package dashboard\12    :ensure t\12    :config\12    (dashboard-setup-startup-hook)\12    (setq dashboard-startup-banner \"~/.emacs.d/img/logo.svg\")\12    (setq dashboard-items '((recents  . 5)\12\11\11\11    (projects . 5)))\12    (setq dashboard-banner-logo-title \"I am just a coder for fun\"))\12  (setq initial-buffer-choice (lambda () (get-buffer \"*dashboard*\")))\12   (setq dashboard-display-icons-p t)\12" :post-blank 0 :post-affiliated 1668 :mode planning :granularity element :cached t :parent #113=(section (:begin 1668 :end 2092 :contents-begin 1668 :contents-end 2092 :robust-begin 1668 :robust-end 2090 :post-blank 0 :post-affiliated 1668 :mode section :granularity element :cached t :parent #112# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #113# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 1393 :end 1655 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package doom-modeline\12    :ensure t\12    :config\12    (display-battery-mode 1)\12    (setq doom-modeline-time-icon t)\12    (setq doom-modeline-battery t)\12    (setq doom-modeline-time t))\12;;   :init\12;;  (doom-modeline-mode 1))\12" :post-blank 1 :post-affiliated 1393 :mode planning :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) 0] [[[nil nil #14# 0] [nil nil (paragraph (:begin 2149 :end 2229 :contents-begin 2149 :contents-end 2229 :post-blank 0 :post-affiliated 2149 :mode planning :granularity element :cached t :parent #115=(section (:begin 2149 :end 2298 :contents-begin 2149 :contents-end 2297 :robust-begin 2149 :robust-end 2295 :post-blank 1 :post-affiliated 2149 :mode section :granularity element :cached t :parent #14# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #115# 0] [[nil nil #116# 0] [nil nil (paragraph (:begin 2332 :end 2384 :contents-begin 2332 :contents-end 2384 :post-blank 0 :post-affiliated 2332 :mode planning :granularity element :cached t :parent #117=(section (:begin 2332 :end 2483 :contents-begin 2332 :contents-end 2482 :robust-begin 2332 :robust-end 2480 :post-blank 1 :post-affiliated 2332 :mode section :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #117# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2229 :end 2298 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inhibit-startup-message t)\12" :post-blank 1 :post-affiliated 2229 :mode nil :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] #22# 0] #118# 0] [[[[[nil nil #119# 0] [nil nil (paragraph (:begin 2500 :end 2582 :contents-begin 2500 :contents-end 2582 :post-blank 0 :post-affiliated 2500 :mode planning :granularity element :cached t :parent #120=(section (:begin 2500 :end 2652 :contents-begin 2500 :contents-end 2651 :robust-begin 2500 :robust-end 2649 :post-blank 1 :post-affiliated 2500 :mode section :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #120# 0] [[nil nil #121# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2675 :end 2893 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq locale-coding-system 'utf-8)\12  (set-terminal-coding-system 'utf-8)\12  (set-keyboard-coding-system 'utf-8)\12  (set-selection-coding-system 'utf-8)\12  (prefer-coding-system 'utf-8)\12" :post-blank 1 :post-affiliated 2675 :mode planning :granularity element :cached t :parent #122=(section (:begin 2675 :end 2893 :contents-begin 2675 :contents-end 2892 :robust-begin 2675 :robust-end 2890 :post-blank 1 :post-affiliated 2675 :mode section :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #122# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2582 :end 2652 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq ring-bell-function 'ignore)\12" :post-blank 1 :post-affiliated 2582 :mode nil :granularity element :cached t :parent #120# :org-element--cache-sync-key nil)) 0] [[[nil nil #123=(section (:begin 2913 :end 3043 :contents-begin 2913 :contents-end 3043 :robust-begin 2913 :robust-end 3041 :post-blank 0 :post-affiliated 2913 :mode section :granularity element :cached t :parent #19# :org-element--cache-sync-key nil)) 0] [nil nil #20# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2913 :end 3043 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package golden-ratio\12        :ensure t\12        :config\12        (golden-ratio-mode 1))\12" :post-blank 0 :post-affiliated 2913 :mode planning :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] [[nil nil #125=(section (:begin 3095 :end 3492 :contents-begin 3095 :contents-end 3492 :robust-begin 3095 :robust-end 3490 :post-blank 0 :post-affiliated 3095 :mode section :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3174 :end 3492 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq make-backup-files nil)\12  (setq auto-save-default nil)\12  (setq create-lockfiles nil)\12\12    ;;  or\12      ;; (setq backup-directory-alist\12      ;;     '((\".\" . \"~/.emacs.d/.trash\"))\12\12      ;;     (setq auto-save-file-name-transforms\12      ;; \11    '((\".*\" \"~/.emacs.d/.trash/\" t)))\12" :post-blank 0 :post-affiliated 3174 :mode nil :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 3095 :end 3174 :contents-begin 3095 :contents-end 3173 :post-blank 1 :post-affiliated 3095 :mode planning :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) 0] #124# 0] #19# 0] [[[[nil nil #128=(section (:begin 3514 :end 3696 :contents-begin 3514 :contents-end 3695 :robust-begin 3514 :robust-end 3693 :post-blank 1 :post-affiliated 3514 :mode section :granularity element :cached t :parent #126# :org-element--cache-sync-key nil)) 0] [nil nil #127# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3514 :end 3696 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;;; Move Text\12  (use-package move-text\12    :ensure t)\12  (global-set-key (kbd \"M-p\") 'move-text-up)\12  (global-set-key (kbd \"M-n\") 'move-text-down)\12" :post-blank 1 :post-affiliated 3514 :mode planning :granularity element :cached t :parent #128# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3728 :end 5295 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (defun ora-ex-point-mark ()\12  ;;   (interactive)\12  ;;   (if rectangle-mark-mode\12  ;;       (exchange-point-and-mark)\12  ;;     (let ((mk (mark)))\12  ;;       (rectangle-mark-mode 1)\12  ;;       (goto-char mk))))\12\12  ;; (defhydra hydra-rectangle (:body-pre (rectangle-mark-mode 1)\12  ;;                            :color pink\12  ;;                            :post (deactivate-mark))\12  ;;   \"\12  ;;   ^_k_^     _d_elete    _s_tring     |\\\\     ‗,,,--,,‗\12  ;; _h_   _l_   _o_k        _y_ank       /,`.-'`'   .‗  \\-;;,‗\12  ;;   ^_j_^     _n_ew-copy  _r_eset     |,4-  ) )‗   .;.(  `'-'\12  ;;   ^^^^        _e_xchange  _u_ndo     '---''(‗/.‗)-'(‗\\‗)\12  ;;   ^^^^        ^ ^         _p_aste\12  ;;   \"\12  ;;   (\"h\" backward-char nil)\12  ;;   (\"l\" forward-char nil)\12  ;;   (\"k\" previous-line nil)\12  ;;   (\"j\" next-line nil)\12  ;;   (\"e\" ora-ex-point-mark nil)\12  ;;   (\"n\" copy-rectangle-as-kill nil)          ;; C-x r M-w\12  ;;   (\"d\" delete-rectangle)                     ;; C-x r d\12  ;;   (\"r\" (if (region-active-p)\12  ;;            (deactivate-mark)\12  ;;          (rectangle-mark-mode 1)) nil)\12  ;;   (\"y\" yank-rectangle)                       ;; C-x r y\12  ;;   (\"u\" undo nil)\12  ;;   (\"s\" string-rectangle)                     ;; C-x r t\12  ;;   (\"p\" kill-rectangle nil)                   ;; C-x r k\12  ;;   (\"o\" open-rectangle)                       ;; C-x r o\12  ;;   (\"c\" clear-rectangle)                      ;; C-x r c\12  ;;   (\"N\" rectangle-number-lines))              ;; C-x r N\12\12    ;; ;; (global-set-key (kbd \"C-x SPC\") 'hydra-rectangle/body)\12" :post-blank 1 :post-affiliated 3728 :mode planning :granularity element :cached t :parent #130=(section (:begin 3728 :end 5295 :contents-begin 3728 :contents-end 5294 :robust-begin 3728 :robust-end 5292 :post-blank 1 :post-affiliated 3728 :mode section :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #136=(section (:begin 5309 :end 5370 :contents-begin 5309 :contents-end 5370 :robust-begin 5309 :robust-end 5368 :post-blank 0 :post-affiliated 5309 :mode section :granularity element :cached t :parent #129# :org-element--cache-sync-key nil)) 0] #129# 0] #130# 0] [[[nil nil #131# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5386 :end 5670 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq world-clock-list\12        '(\12  \11(\"Australia/Melbourne\" \"Melbourne\")\12  \11(\"Asia/kolkata\" \"India\")\12  \11(\"America/Chicago\" \"Chicago\")\12  \11(\"Asia/Kathmandu\" \"Kathmandu\")\12  \11(\"Etc/UTC\" \"UTC\")))\12\12  (setq world-clock-time-format \"%a, %d %b %I:%M %p %Z\")\12" :post-blank 0 :post-affiliated 5386 :mode planning :granularity element :cached t :parent #132=(section (:begin 5386 :end 5670 :contents-begin 5386 :contents-end 5670 :robust-begin 5386 :robust-end 5668 :post-blank 0 :post-affiliated 5386 :mode section :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #132# 0] [[nil nil #135=(section (:begin 5724 :end 5834 :contents-begin 5724 :contents-end 5834 :robust-begin 5724 :robust-end 5832 :post-blank 0 :post-affiliated 5724 :mode section :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] [nil nil #134# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5724 :end 5793 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defalias 'yes-or-no-p 'y-or-n-p)\12" :post-blank 0 :post-affiliated 5724 :mode planning :granularity element :cached t :parent #135# :org-element--cache-sync-key nil)) 0] #133# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5309 :end 5370 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(global-visual-line-mode t)\12" :post-blank 0 :post-affiliated 5309 :mode planning :granularity element :cached t :parent #136# :org-element--cache-sync-key nil)) 0] #126# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 2384 :end 2483 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (tool-bar-mode -1)\12  (menu-bar-mode -1)\12  (scroll-bar-mode -1)\12" :post-blank 1 :post-affiliated 2384 :mode nil :granularity element :cached t :parent #117# :org-element--cache-sync-key nil)) 0] [[[[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5851 :end 6113 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package recentf\12  :init\12  (setq\12    recentf-save-file \"~/.emacs.d/.cache/recentf\"\12    recentf-max-saved-items 10000\12    recentf-max-menu-items 5000\12    )\12  (recentf-mode 1)\12  (run-at-time nil (* 5 60) 'recentf-save-list)\12)\12" :post-blank 1 :post-affiliated 5851 :mode planning :granularity element :cached t :parent #168=(section (:begin 5851 :end 6113 :contents-begin 5851 :contents-end 6112 :robust-begin 5851 :robust-end 6110 :post-blank 1 :post-affiliated 5851 :mode section :granularity element :cached t :parent #134# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #140=(section (:begin 6142 :end 6549 :contents-begin 6142 :contents-end 6549 :robust-begin 6142 :robust-end 6547 :post-blank 0 :post-affiliated 6142 :mode section :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] #137# 0] [[nil nil #138# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6563 :end 6667 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package sudo-edit\12  :ensure t\12  :bind (\"C-c C-0\" . sudo-edit))\12" :post-blank 1 :post-affiliated 6563 :mode planning :granularity element :cached t :parent #139=(section (:begin 6563 :end 6667 :contents-begin 6563 :contents-end 6666 :robust-begin 6563 :robust-end 6664 :post-blank 1 :post-affiliated 6563 :mode section :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #139# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6142 :end 6549 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      ;; (setq display-line-numbers-type 'relative)\12      ;; (setq display-line-numbers-mode)\12\12    (setq display-line-numbers-type 'relative)  ;; Use 't for absolute numbers\12      (global-display-line-numbers-mode 1)\12\12  ;; of in mode only\12  (add-hook 'org-mode-hook (lambda () (display-line-numbers-mode -1)))\12\12        ;; off\12        ;; (setq display-line-numbers-type nil)\12" :post-blank 0 :post-affiliated 6142 :mode planning :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) 0] [[[nil nil #142=(section (:begin 6720 :end 7101 :contents-begin 6720 :contents-end 7100 :robust-begin 6720 :robust-end 7098 :post-blank 1 :post-affiliated 6720 :mode section :granularity element :cached t :parent #141# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 6875 :end 6987 :contents-begin 6875 :contents-end 6987 :post-blank 0 :post-affiliated 6875 :mode nil :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 6720 :end 6875 :contents-begin 6720 :contents-end 6874 :post-blank 1 :post-affiliated 6720 :mode planning :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 0] [[nil nil #143# 0] [nil nil (paragraph (:begin 7143 :end 7391 :contents-begin 7143 :contents-end 7391 :post-blank 0 :post-affiliated 7143 :mode planning :granularity element :cached t :parent #144=(section (:begin 7143 :end 7488 :contents-begin 7143 :contents-end 7487 :robust-begin 7143 :robust-end 7485 :post-blank 1 :post-affiliated 7143 :mode section :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #144# 0] (src-block (:language "elisp" :switches nil :parameters nil :begin 6987 :end 7101 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Remember and restore the last cursor location of opened files\12(save-place-mode 1)\12" :post-blank 1 :post-affiliated 6987 :mode nil :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) 0] #141# 0] [[[[nil nil #145# 0] [nil nil (paragraph (:begin 7538 :end 7855 :contents-begin 7538 :contents-end 7854 :post-blank 1 :post-affiliated 7538 :mode planning :granularity element :cached t :parent #146=(section (:begin 7538 :end 8622 :contents-begin 7538 :contents-end 8621 :robust-begin 7538 :robust-end 8619 :post-blank 1 :post-affiliated 7538 :mode section :granularity element :cached t :parent #145# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #146# 0] [[nil nil (src-block (:language "elisp" :switches nil :parameters nil :begin 8040 :end 8151 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Revert buffers when the underlying file has changed\12(global-auto-revert-mode 1)\12" :post-blank 0 :post-affiliated 8040 :mode nil :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 8285 :end 8514 :contents-begin 8285 :contents-end 8514 :post-blank 0 :post-affiliated 8285 :mode nil :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 8151 :end 8285 :contents-begin 8151 :contents-end 8284 :post-blank 1 :post-affiliated 8151 :mode nil :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 7855 :end 8040 :contents-begin 7855 :contents-end 8040 :post-blank 0 :post-affiliated 7855 :mode nil :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] [[[nil nil #147# 0] [nil nil (paragraph (:begin 8636 :end 8668 :contents-begin 8636 :contents-end 8668 :post-blank 0 :post-affiliated 8636 :mode planning :granularity element :cached t :parent #148=(section (:begin 8636 :end 9001 :contents-begin 8636 :contents-end 9000 :robust-begin 8636 :robust-end 8998 :post-blank 1 :post-affiliated 8636 :mode section :granularity element :cached t :parent #147# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #148# 0] [[nil nil #149# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9039 :end 9258 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(defun my-line-save ()\12  (interactive)\12  (let ((l (substring (thing-at-point 'line) 0 -1)))\12    (kill-new l)\12    (message \"saved : %s\" l)))\12(local-set-key (kbd \"C-c w\") #'my-line-save)\12" :post-blank 1 :post-affiliated 9039 :mode planning :granularity element :cached t :parent #150=(section (:begin 9039 :end 9258 :contents-begin 9039 :contents-end 9257 :robust-begin 9039 :robust-end 9255 :post-blank 1 :post-affiliated 9039 :mode section :granularity element :cached t :parent #149# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #150# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8668 :end 9001 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package all-the-icons\12      :ensure t\12      :init)\12    ;; (use-package treemacs-icons-dired\12    ;;   :ensure t\12    ;;   :if (display-graphic-p)\12    ;;   :config (treemacs-icons-dired-mode))\12\12    (use-package all-the-icons-ibuffer\12      :ensure t\12      :init (all-the-icons-ibuffer-mode 1))\12" :post-blank 1 :post-affiliated 8668 :mode nil :granularity element :cached t :parent #148# :org-element--cache-sync-key nil)) 0] (src-block (:language "elisp" :switches nil :parameters nil :begin 8514 :end 8622 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Revert Dired and other buffers\12(setq global-auto-revert-non-file-buffers t)\12" :post-blank 1 :post-affiliated 8514 :mode nil :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) 0] (src-block (:language "elisp" :switches nil :parameters nil :begin 7391 :end 7488 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";; Don't pop up UI dialogs when prompting\12(setq use-dialog-box nil)\12" :post-blank 1 :post-affiliated 7391 :mode nil :granularity element :cached t :parent #144# :org-element--cache-sync-key nil)) 0] [[[[[nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9267 :end 11879 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; (use-package dired\12    ;;   :ensure nil\12    ;;   :config\12    ;;   ;; (setq insert-directory-program \"exa\")  ;; or \"exa\" if you prefer that\12    ;;   (setq dired-listing-switches \"--color=auto -alh\")) ;; Adjust flags as needed\12\12\12    ;; (use-package all-the-icons\12      ;; :ensure t)\12    ;; Directory operations\12    (use-package dired\12      :ensure nil\12      :bind (:map dired-mode-map\12\11\11  (\"C-c C-p\" . wdired-change-to-wdired-mode))\12      :config\12      ;; Guess a default target directory\12      (setq dired-dwim-target t)\12\12      ;; Always delete and copy recursively\12      (setq dired-recursive-deletes 'always\12\11    dired-recursive-copies 'always)\12\12      ;; Show directory first\12      (setq dired-listing-switches \"-alh --group-directories-first\"))\12\12      ;; Quick sort dired buffers via hydra\12      (use-package dired-quick-sort\12\11:ensure t\12\11:bind (:map dired-mode-map\12\11\11  (\"S\" . hydra-dired-quick-sort/body)))\12\12      ;; Show git info in dired\12      (use-package dired-git-info\12\11:ensure t\12\11:bind (:map dired-mode-map\12\11\11  (\")\" . dired-git-info-mode)))\12\12      ;; Allow rsync from dired buffers\12      (use-package dired-rsync\12\11:ensure t\12\11:bind (:map dired-mode-map\12\11\11  (\"C-c C-r\" . dired-rsync)))\12\12      ;; Colorful dired\12  ;;    (use-package diredfl\12  ;;      :ensure t\12  ;;      :hook (dired-mode . diredfl-mode))\12\12      ;; (use-package nerd-icons-dired\12\11;; :ensure t\12\11;; :diminish\12\11;; :if (featurep 'all-the-icons)\12\11;; :custom-face\12\11;; (nerd-icons-dired-dir-face ((t (:inherit nerd-icons-dsilver :foreground unspecified))))\12\11;; :hook (dired-mode . nerd-icons-dired-mode))\12\12  (with-eval-after-load 'dired\12  (define-key dired-mode-map (kbd \"C-c C-n\") 'dired-create-empty-file))\12\12  (use-package dired-aux\12    :demand t)\12\12  (use-package dired-x\12    :demand t\12    :config\12    (let ((cmd (cond ((eq system-type 'darwin) \"open\")   ;; macOS\12\11\11     ((eq system-type 'gnu/linux) \"xdg-open\")   ;; Linux\12\11\11     ((eq system-type 'windows-nt) \"start\")   ;; Windows\12\11\11     (t \"\"))))  ;; Default to empty for unknown OS\12      (setq dired-guess-shell-alist-user\12\11    `((\"\\\\.pdf\\\\'\" ,cmd)\12\11      (\"\\\\.docx\\\\'\" ,cmd)\12\11      (\"\\\\.\\\\(?:djvu\\\\|eps\\\\)\\\\'\" ,cmd)\12\11      (\"\\\\.\\\\(?:jpg\\\\|jpeg\\\\|png\\\\|gif\\\\|xpm\\\\)\\\\'\" ,cmd)\12\11      (\"\\\\.\\\\(?:xcf\\\\)\\\\'\" ,cmd)\12\11      (\"\\\\.csv\\\\'\" ,cmd)\12\11      (\"\\\\.tex\\\\'\" ,cmd)\12\11      (\"\\\\.\\\\(?:mp4\\\\|mkv\\\\|avi\\\\|flv\\\\|rm\\\\|rmvb\\\\|ogv\\\\)\\\\(?:\\\\.part\\\\)?\\\\'\" ,cmd)\12\11      (\"\\\\.\\\\(?:mp3\\\\|flac\\\\)\\\\'\" ,cmd)\12\11      (\"\\\\.html?\\\\'\" ,cmd)\12\11      (\"\\\\.md\\\\'\" ,cmd)))))\12\12      ;; `find-dired' alternative using `fd'\12      (when (executable-find \"fd\")\12\11(use-package fd-dired))\12" :post-blank 0 :post-affiliated 9267 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #151=(section (:begin 9267 :end 11879 :contents-begin 9267 :contents-end 11879 :robust-begin 9267 :robust-end 11877 :post-blank 0 :post-affiliated 9267 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #36#)))) 0] #151# 1] [nil nil #152# 0] #37# -1] [nil [nil nil #153# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 11905 :end 13669 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; Enable vertico\12   (use-package compat\12     :ensure t)\12\12  (use-package vertico\12    :ensure t\12    :custom\12    ;; (vertico-scroll-margin 0) ;; Different scroll margin\12    ;; (vertico-count 20) ;; Show more candidates\12    (vertico-resize t) ;; Grow and shrink the Vertico minibuffer\12    ;; (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'\12    :init\12    (vertico-mode))\12\12  ;; Persist history over Emacs restarts. Vertico sorts by history position.\12  (use-package savehist\12    :ensure t\12    :init\12    (savehist-mode))\12\12  ;; A few more useful configurations...\12  (use-package emacs\12    :ensure t\12    :custom\12    ;; Support opening new minibuffers from inside existing minibuffers.\12    (enable-recursive-minibuffers t)\12    ;; Hide commands in M-x which do not work in the current mode.  Vertico\12    ;; commands are hidden in normal buffers. This setting is useful beyond\12    ;; Vertico.\12    (read-extended-command-predicate #'command-completion-default-include-p)\12    :init\12    ;; Add prompt indicator to `completing-read-multiple'.\12    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.\12    (defun crm-indicator (args)\12      (cons (format \"[CRM%s] %s\"\12\11\11    (replace-regexp-in-string\12\11\11     \"\\\\`\\\\[.*?]\\\\*\\\\|\\\\[.*?]\\\\*\\\\'\" \"\"\12\11\11     crm-separator)\12\11\11    (car args))\12\11    (cdr args)))\12    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)\12\12    ;; Do not allow the cursor in the minibuffer prompt\12    (setq minibuffer-prompt-properties\12\11  '(read-only t cursor-intangible t face minibuffer-prompt))\12    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))\12\12  (setq read-file-name-completion-ignore-case t\12\11read-buffer-completion-ignore-case t\12\11completion-ignore-case t)\12" :post-blank 0 :post-affiliated 11905 :mode planning :granularity element :cached t :parent #154=(section (:begin 11905 :end 13669 :contents-begin 11905 :contents-end 13669 :robust-begin 11905 :robust-end 13667 :post-blank 0 :post-affiliated 11905 :mode section :granularity element :cached t :parent #152# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 1] #154# -1] [[[nil nil (paragraph (:begin 13684 :end 13721 :contents-begin 13684 :contents-end 13721 :post-blank 0 :post-affiliated 13684 :mode planning :granularity element :cached t :parent #156=(section (:begin 13684 :end 13832 :contents-begin 13684 :contents-end 13832 :robust-begin 13684 :robust-end 13830 :post-blank 0 :post-affiliated 13684 :mode section :granularity element :cached t :parent #153# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #155# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13721 :end 13832 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package marginalia\12    :ensure t\12    :config\12     (marginalia-mode 1))\12" :post-blank 0 :post-affiliated 13721 :mode nil :granularity element :cached t :parent #156# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 13846 :end 13966 :contents-begin 13846 :contents-end 13966 :post-blank 0 :post-affiliated 13846 :mode planning :granularity element :cached t :parent #158=(section (:begin 13846 :end 14497 :contents-begin 13846 :contents-end 14496 :robust-begin 13846 :robust-end 14494 :post-blank 1 :post-affiliated 13846 :mode section :granularity element :cached t :parent #155# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #157# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13966 :end 14497 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Optionally use the `orderless' completion style.\12  (use-package orderless\12    :ensure t\12    :custom\12    ;; Configure a custom style dispatcher (see the Consult wiki)\12    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))\12    ;; (orderless-component-separator #'orderless-escapable-split-on-space)\12    (completion-styles '(orderless basic))\12    (completion-category-defaults nil)\12    (completion-category-overrides '((file (styles partial-completion)))))\12" :post-blank 1 :post-affiliated 13966 :mode nil :granularity element :cached t :parent #158# :org-element--cache-sync-key nil)) 0] #158# 0] #156# -1] [[[[nil nil (paragraph (:begin 14510 :end 14563 :contents-begin 14510 :contents-end 14563 :post-blank 0 :post-affiliated 14510 :mode planning :granularity element :cached t :parent #160=(section (:begin 14510 :end 14644 :contents-begin 14510 :contents-end 14643 :robust-begin 14510 :robust-end 14641 :post-blank 1 :post-affiliated 14510 :mode section :granularity element :cached t :parent #157# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #159# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14563 :end 14644 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;  (ido-mode 1)\12;;  (setq ido-separator \"\\n\")\12" :post-blank 1 :post-affiliated 14563 :mode nil :granularity element :cached t :parent #160# :org-element--cache-sync-key nil)) 0] [[nil nil (plain-list (:type unordered :begin 14698 :end 14735 :contents-begin 14698 :contents-end 14735 :structure ((14698 0 "- " nil nil nil 14735)) :post-blank 0 :post-affiliated 14698 :mode planning :granularity element :cached t :parent #162=(section (:begin 14698 :end 16143 :contents-begin 14698 :contents-end 16143 :robust-begin 14698 :robust-end 16141 :post-blank 0 :post-affiliated 14698 :mode section :granularity element :cached t :parent #159# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #161# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14735 :end 16143 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package corfu\12      :ensure t\12      :custom\12      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'\12      (corfu-auto t)                 ;; Enable auto completion\12      ;; (corfu-separator ?\\s)          ;; Orderless field separator\12      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary\12      (corfu-quit-no-match 'separator)      ;; Never quit, even if there is no match\12      ;; (corfu-preview-current nil)    ;; Disable current candidate preview\12      ;; (corfu-elect 'prompt)      ;; Preselect the prompt\12      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches\12      ;; (corfu-scroll-margin 5)        ;; Use scroll margin\12\12      ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.\12      ;; :hook ((prog-mode . corfu-mode)\12      ;;        (shell-mode . corfu-mode)\12      ;;        (eshell-mode . corfu-mode))\12\12      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can\12      ;; be used globally (M-/).  See also the customization variable\12      ;; `global-corfu-modes' to exclude certain modes.\12      :init\12      (global-corfu-mode))\12\12    (use-package emacs\12      :ensure t\12      :custom\12      (tab-always-indent 'complete)\12      (text-mode-ispell-word-completion nil)\12      (read-extended-command-predicate #'command-completion-default-include-p))\12" :post-blank 0 :post-affiliated 14735 :mode nil :granularity element :cached t :parent #162# :org-element--cache-sync-key nil)) 0] #162# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16163 :end 21297 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; Example configuration for Consult\12  (use-package consult\12    :ensure t\12    ;; Replace bindings. Lazily loaded by `use-package'.\12    :bind (;; C-c bindings in `mode-specific-map'\12  \11   (\"C-c M-x\" . consult-mode-command)\12  \11   (\"C-c h\" . consult-history)\12  \11   (\"C-c k\" . consult-kmacro)\12  \11   (\"C-c m\" . consult-man)\12  \11   (\"C-c i\" . consult-info)\12  \11   ([remap Info-search] . consult-info)\12  \11   ;; C-x bindings in `ctl-x-map'\12  \11   (\"C-x M-:\" . consult-complex-command)     ;; orig. repeat-complex-command\12  \11   ;; (\"C-x b\" . consult-buffer)                ;; orig. switch-to-buffer\12  \11   (\"C-x 4 b\" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window\12  \11   (\"C-x 5 b\" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame\12  \11   (\"C-x t b\" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab\12  \11   (\"C-x r b\" . consult-bookmark)            ;; orig. bookmark-jump\12  \11   (\"C-x p b\" . consult-project-buffer)      ;; orig. project-switch-to-buffer\12  \11   ;; Custom M-# bindings for fast register access\12  \11   (\"M-#\" . consult-register-load)\12  \11   (\"M-'\" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)\12  \11   (\"C-M-#\" . consult-register)\12  \11   ;; Other custom bindings\12  \11   (\"M-y\" . consult-yank-pop)                ;; orig. yank-pop\12  \11   ;; M-g bindings in `goto-map'\12  \11   (\"M-g e\" . consult-compile-error)\12  \11   (\"M-g f\" . consult-flymake)               ;; Alternative: consult-flycheck\12  \11   (\"M-g g\" . consult-goto-line)             ;; orig. goto-line\12  \11   (\"M-g M-g\" . consult-goto-line)           ;; orig. goto-line\12  \11   (\"M-g o\" . consult-outline)               ;; Alternative: consult-org-heading\12  \11   (\"M-g m\" . consult-mark)\12  \11   (\"M-g k\" . consult-global-mark)\12  \11   (\"M-g i\" . consult-imenu)\12  \11   (\"M-g I\" . consult-imenu-multi)\12  \11   ;; M-s bindings in `search-map'\12  \11   (\"M-s d\" . consult-find)                  ;; Alternative: consult-fd\12  \11   (\"M-s c\" . consult-locate)\12  \11   (\"M-s g\" . consult-grep)\12  \11   (\"M-s G\" . consult-git-grep)\12  \11   (\"M-s r\" . consult-ripgrep)\12  \11   (\"M-s l\" . consult-line)\12  \11   (\"M-s L\" . consult-line-multi)\12  \11   (\"M-s k\" . consult-keep-lines)\12  \11   (\"M-s u\" . consult-focus-lines)\12  \11   ;; Isearch integration\12  \11   (\"M-s e\" . consult-isearch-history)\12  \11   :map isearch-mode-map\12  \11   (\"M-e\" . consult-isearch-history)         ;; orig. isearch-edit-string\12  \11   (\"M-s e\" . consult-isearch-history)       ;; orig. isearch-edit-string\12  \11   (\"M-s l\" . consult-line)                  ;; needed by consult-line to detect isearch\12  \11   (\"M-s L\" . consult-line-multi)            ;; needed by consult-line to detect isearch\12  \11   ;; Minibuffer history\12  \11   :map minibuffer-local-map\12  \11   (\"M-s\" . consult-history)                 ;; orig. next-matching-history-element\12  \11   (\"M-r\" . consult-history))                ;; orig. previous-matching-history-element\12\12    ;; Enable automatic preview at point in the *Completions* buffer. This is\12    ;; relevant when you use the default completion UI.\12    :hook (completion-list-mode . consult-preview-at-point-mode)\12\12    ;; The :init configuration is always executed (Not lazy)\12    :init\12\12    ;; Optionally configure the register formatting. This improves the register\12    ;; preview for `consult-register', `consult-register-load',\12    ;; `consult-register-store' and the Emacs built-ins.\12    (setq register-preview-delay 0.5\12  \11  register-preview-function #'consult-register-format)\12\12    ;; Optionally tweak the register preview window.\12    ;; This adds thin lines, sorting and hides the mode line of the window.\12    (advice-add #'register-preview :override #'consult-register-window)\12\12    ;; Use Consult to select xref locations with preview\12    (setq xref-show-xrefs-function #'consult-xref\12  \11  xref-show-definitions-function #'consult-xref)\12\12    ;; Configure other variables and modes in the :config section,\12    ;; after lazily loading the package.\12    :config\12    ;; Optionally configure preview. The default value\12    ;; is 'any, such that any key triggers the preview.\12    ;; (setq consult-preview-key 'any)\12    ;; (setq consult-preview-key \"M-.\")\12    ;; (setq consult-preview-key '(\"S-<down>\" \"S-<up>\"))\12    ;; For some commands and buffer sources it is useful to configure the\12    ;; :preview-key on a per-command basis using the `consult-customize' macro.\12    (consult-customize\12     consult-theme :preview-key '(:debounce 0.2 any)\12     consult-ripgrep consult-git-grep consult-grep\12     consult-bookmark consult-recent-file consult-xref\12     consult--source-bookmark consult--source-file-register\12     consult--source-recent-file consult--source-project-recent-file\12     ;; :preview-key \"M-.\"\12     :preview-key '(:debounce 0.4 any))\12\12    ;; Optionally configure the narrowing key.\12    ;; Both < and C-+ work reasonably well.\12    (setq consult-narrow-key \"<\") ;; \"C-+\"\12\12    ;; Optionally make narrowing help available in the minibuffer.\12    ;; You may want to use `embark-prefix-help-command' or which-key instead.\12    ;; (keymap-set consult-narrow-map (concat consult-narrow-key \" ?\") #'consult-narrow-help)\12  )\12" :post-blank 0 :post-affiliated 16163 :mode planning :granularity element :cached t :parent #167=(section (:begin 16163 :end 21297 :contents-begin 16163 :contents-end 21297 :robust-begin 16163 :robust-end 21295 :post-blank 0 :post-affiliated 16163 :mode section :granularity element :cached t :parent #161# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #166=(section (:begin 21310 :end 21420 :contents-begin 21310 :contents-end 21419 :robust-begin 21310 :robust-end 21417 :post-blank 1 :post-affiliated 21310 :mode section :granularity element :cached t :parent #163# :org-element--cache-sync-key nil)) 0] #163# 0] [[nil nil #164# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21430 :end 22812 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package embark\12  :ensure t\12  :bind\12  ((\"C-.\" . embark-act)         ;; pick some comfortable binding\12   (\"C-;\" . embark-dwim)        ;; good alternative: M-.\12   (\"C-h B\" . embark-bindings)) ;; alternative for `describe-bindings'\12\12  :init\12\12  ;; Optionally replace the key help with a completing-read interface\12  (setq prefix-help-command #'embark-prefix-help-command)\12\12  ;; Show the Embark target at point via Eldoc. You may adjust the\12  ;; Eldoc strategy, if you want to see the documentation from\12  ;; multiple providers. Beware that using this can be a little\12  ;; jarring since the message shown in the minibuffer can be more\12  ;; than one line, causing the modeline to move up and down:\12\12  ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)\12  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)\12\12  :config\12\12  ;; Hide the mode line of the Embark live/completions buffers\12  (add-to-list 'display-buffer-alist\12               '(\"\\\\`\\\\*Embark Collect \\\\(Live\\\\|Completions\\\\)\\\\*\"\12                 nil\12                 (window-parameters (mode-line-format . none)))))\12\12;; Consult users will also want the embark-consult package.\12(use-package embark-consult\12  :ensure t ; only need to install it, embark loads it after consult if found\12  :hook\12  (embark-collect-mode . consult-preview-at-point-mode))\12" :post-blank 0 :post-affiliated 21430 :mode planning :granularity element :cached t :parent #165=(section (:begin 21430 :end 22812 :contents-begin 21430 :contents-end 22812 :robust-begin 21430 :robust-end 22810 :post-blank 0 :post-affiliated 21430 :mode section :granularity element :cached t :parent #164# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #165# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21310 :end 21420 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :ensure t\12    :config\12    (which-key-mode))\12\12\12\12" :post-blank 1 :post-affiliated 21310 :mode planning :granularity element :cached t :parent #166# :org-element--cache-sync-key nil)) 0] #167# 0] #160# -1] #36# 1] #168# 1] [[[[[[[nil nil #170=(section (:begin 22821 :end 23815 :contents-begin 22821 :contents-end 23814 :robust-begin 22821 :robust-end 23812 :post-blank 1 :post-affiliated 22821 :mode section :granularity element :cached t :parent #169# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 23413 :end 23815 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       ;; (use-package vterm\12\11 ;; :ensure t\12\11 ;; :init)\12  ;;  (setq vterm-shell \"/usr/bin/fish\")  ;; Adjust the path to fish if necessary\12    ;; (setq vterm-shell \"/run/current-system/sw/bin/fish\") ;; for nixos\12\12\11;; (setq vterm-shell \"/usr/bin/bash\")\12\12       ;; (use-package multi-vterm\12\11 ;; :ensure t\12\11 ;; :init\12\11 ;; (global-set-key (kbd \"<M-return>\") 'multi-vterm))\12" :post-blank 1 :post-affiliated 23413 :mode nil :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) 0] (table (:begin 22821 :end 23413 :type org :tblfm nil :contents-begin 22821 :contents-end 23412 :value nil :post-blank 1 :post-affiliated 22821 :mode planning :granularity element :cached t :parent #170# :org-element--cache-sync-key nil)) 0] [[nil nil #173=(section (:begin 23826 :end 23930 :contents-begin 23826 :contents-end 23929 :robust-begin 23826 :robust-end 23927 :post-blank 1 :post-affiliated 23826 :mode section :granularity element :cached t :parent #171# :org-element--cache-sync-key nil)) 0] [nil nil #172# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 23826 :end 23930 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (global-set-key (kbd \"C-x C-b\") 'ibuffer)\12  (setq ibuffer-expert t)\12" :post-blank 1 :post-affiliated 23826 :mode planning :granularity element :cached t :parent #173# :org-element--cache-sync-key nil)) 0] #171# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 23949 :end 25317 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package vundo\12    :commands (vundo)\12    :ensure t\12    :config\12    ;; Take less on-screen space.\12    (setq vundo-compact-display t)\12\12    ;; Better contrasting highlight.\12    (custom-set-faces\12      '(vundo-node ((t (:foreground \"#808080\"))))\12      '(vundo-stem ((t (:foreground \"#808080\"))))\12      '(vundo-highlight ((t (:foreground \"#FFFF00\")))))\12\12    ;; Use `HJKL` VIM-like motion, also Home/End to jump around.\12    (define-key vundo-mode-map (kbd \"l\") #'vundo-forward)\12    (define-key vundo-mode-map (kbd \"<right>\") #'vundo-forward)\12    (define-key vundo-mode-map (kbd \"h\") #'vundo-backward)\12    (define-key vundo-mode-map (kbd \"<left>\") #'vundo-backward)\12    (define-key vundo-mode-map (kbd \"j\") #'vundo-next)\12    (define-key vundo-mode-map (kbd \"<down>\") #'vundo-next)\12    (define-key vundo-mode-map (kbd \"k\") #'vundo-previous)\12    (define-key vundo-mode-map (kbd \"<up>\") #'vundo-previous)\12    (define-key vundo-mode-map (kbd \"<home>\") #'vundo-stem-root)\12    (define-key vundo-mode-map (kbd \"<end>\") #'vundo-stem-end)\12    (define-key vundo-mode-map (kbd \"q\") #'vundo-quit)\12    (define-key vundo-mode-map (kbd \"C-g\") #'vundo-quit)\12    (define-key vundo-mode-map (kbd \"RET\") #'vundo-confirm))\12\12  (with-eval-after-load 'evil\12    (evil-define-key 'normal 'global (kbd \"C-M-u\") 'vundo))\12\12  (global-set-key (kbd \"C-x u\") 'vundo)\12" :post-blank 1 :post-affiliated 23949 :mode planning :granularity element :cached t :parent #178=(section (:begin 23949 :end 25317 :contents-begin 23949 :contents-end 25316 :robust-begin 23949 :robust-end 25314 :post-blank 1 :post-affiliated 23949 :mode section :granularity element :cached t :parent #172# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #177=(section (:begin 25337 :end 25747 :contents-begin 25337 :contents-end 25747 :robust-begin 25337 :robust-end 25745 :post-blank 0 :post-affiliated 25337 :mode section :granularity element :cached t :parent #174# :org-element--cache-sync-key nil)) 0] #174# 0] [[nil nil #175# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 25757 :end 28372 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      ;; Bind `previous-buffer` globally\12      ;; Bind `next-buffer` globally\12      (global-set-key [mouse-9] #'next-buffer)\12      (global-set-key [mouse-8] #'previous-buffer)\12    ;; (global-set-key (kbd \"M-.\") 'next-buffer)\12    ;; (global-set-key (kbd \"M-,\") 'previous-buffer)-\12\12  (global-set-key (kbd \"M-1\") 'previous-buffer)\12  (global-set-key (kbd \"M-2\") 'next-buffer)\12\12      ;; remap redo from C-M-_ to  C-x U \12      (global-set-key (kbd \"C-x U\") 'undo-redo)\12\12      ;; Visiting the configuration\12      (defun config-visit ()\12        (interactive)\12        (find-file \"~/.emacs.d/config.org\"))\12      (global-set-key (kbd \"C-c e\") 'config-visit)\12\12      ;; Toggle maximize buffer\12      (defun toggle-maximize-buffer () \"Maximize buffer\"\12             (interactive)\12             (if (= 1 (length (window-list)))\12        \11   (jump-to-register '_)\12        \11 (progn\12        \11   (set-register '_ (list (current-window-configuration)))\12        \11   (delete-other-windows))))\12      (global-set-key [(super shift return)] 'toggle-maximize-buffer) \12\12      ;;Always murder current buffer\12      (defun kill-curr-buffer ()\12        (interactive)\12        (kill-buffer (current-buffer)))\12      (global-set-key (kbd \"C-x k\") 'kill-curr-buffer)\12\12      ;;  Kill whole word\12      (defun kill-whole-word ()\12        (interactive)\12        (backward-word)\12        (kill-word 1))\12      (global-set-key (kbd \"C-c w w\") 'kill-whole-word)\12\12      ;;  Copy whole line\12      (defun copy-whole-line ()\12        (interactive)\12        (save-excursion\12          (kill-new\12           (buffer-substring\12            (point-at-bol)\12            (point-at-eol)))))\12      (global-set-key (kbd \"C-c w l\") 'copy-whole-line)\12      ;;Kill all buffers\12      (defun kill-all-buffers ()\12        (interactive)\12        (mapc 'kill-buffer (buffer-list)))\12      (global-set-key (kbd \"C-M-s-k\") 'kill-all-buffers)\12\12      ;; comment and un comment\12      ;; Comment and uncomment region with C-c c and C-c u\12      (global-set-key (kbd \"C-c c\") 'comment-region)\12      (global-set-key (kbd \"C-c u\") 'uncomment-region)\12\12      ;; Optional: Use C-; to comment/uncomment\12      (global-set-key (kbd \"C-;\") 'comment-line)\12      ;; fixed backward word del\12\12      (defun my/backward-kill-spaces-or-char-or-word ()\12        (interactive)\12        (cond\12         ((looking-back (rx (char word)) 1)\12          (backward-kill-word 1))\12         ((looking-back (rx (char blank)) 1)\12          (delete-horizontal-space t))\12         (t\12          (backward-delete-char 1))))\12      (global-set-key (kbd \"<C-backspace>\") 'my/backward-kill-spaces-or-char-or-word)\12\12" :post-blank 1 :post-affiliated 25757 :mode planning :granularity element :cached t :parent #176=(section (:begin 25757 :end 28372 :contents-begin 25757 :contents-end 28371 :robust-begin 25757 :robust-end 28369 :post-blank 1 :post-affiliated 25757 :mode section :granularity element :cached t :parent #175# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #176# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 25337 :end 25747 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (use-package multiple-cursors\12       :ensure t)\12(global-unset-key (kbd \"M-<down-mouse-1>\"))\12(global-set-key (kbd \"M-<mouse-1>\") 'mc/add-cursor-on-click)\12\12(global-set-key (kbd \"C-S-c C-S-c\") 'mc/edit-lines)\12(global-set-key (kbd \"C->\") 'mc/mark-next-like-this)\12(global-set-key (kbd \"C-<\") 'mc/mark-previous-like-this)\12(global-set-key (kbd \"C-c C-<\") 'mc/mark-all-like-this)\12" :post-blank 0 :post-affiliated 25337 :mode planning :granularity element :cached t :parent #177# :org-element--cache-sync-key nil)) 0] #178# 0] [[[[nil nil #180=(section (:begin 28392 :end 28826 :contents-begin 28392 :contents-end 28826 :robust-begin 28392 :robust-end 28824 :post-blank 0 :post-affiliated 28392 :mode section :granularity element :cached t :parent #56# :org-element--cache-sync-key nil)) 0] [nil nil #179# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 28392 :end 28826 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package magit\12    :ensure t\12    :config\12    (setq magit-push-always-verify nil)\12    (setq git-commit-summary-max-length 50)\12    :bind\12    ;; (\"C-c g g\" . magit-status))\12    (\"C-c g g\" . my/magit-status))\12\12  ;; opens magit in full window rather then popup\12  (defun my/magit-status ()\12  \"Don't split window.\"\12  (interactive)\12  (let ((pop-up-windows nil))\12    (call-interactively 'magit-status)))\12" :post-blank 0 :post-affiliated 28392 :mode planning :granularity element :cached t :parent #180# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 28838 :end 28980 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package diff-hl\12    :ensure t\12    :config\12    (global-diff-hl-mode)\12    (diff-hl-dired-mode 'toggle))\12" :post-blank 0 :post-affiliated 28838 :mode planning :granularity element :cached t :parent #181=(section (:begin 28838 :end 28980 :contents-begin 28838 :contents-end 28980 :robust-begin 28838 :robust-end 28978 :post-blank 0 :post-affiliated 28838 :mode section :granularity element :cached t :parent #179# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #104# 0] #55# 0] #181# 0] [[[nil nil #182# 0] [nil nil (plain-list (:type unordered :begin 29254 :end 29321 :contents-begin 29254 :contents-end 29320 :structure ((29254 0 "- " nil nil nil 29320)) :post-blank 1 :post-affiliated 29254 :mode planning :granularity element :cached t :parent #183=(section (:begin 29254 :end 31913 :contents-begin 29254 :contents-end 31913 :robust-begin 29254 :robust-end 31911 :post-blank 0 :post-affiliated 29254 :mode section :granularity element :cached t :parent #182# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #183# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 29402 :end 31913 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Set up hooks for the various programming modes\12;;  (add-hook 'c-mode-hook 'lsp-deferred)\12;;  (add-hook 'python-mode-hook 'lsp-deferred)\12;;  (add-hook 'c++-mode-hook 'lsp-deferred)\12;;    ;; Disable corfu \12  (add-hook 'python-mode-hook (lambda () (corfu-mode -1)))\12  (add-hook 'c-mode-hook (lambda () (corfu-mode -1)))\12  (add-hook 'c++-mode-hook (lambda () (corfu-mode -1)))\12;;\12;;        (use-package lsp-mode\12;;          :ensure t\12;;          :commands lsp\12;;          :config\12;;          (setq lsp-prefer-flymake nil\12;;                lsp-idle-delay 0.0)\12;;          (setq lsp-headerline-breadcrumb-enable nil)\12;;\12;;          ;; Enable additional modes and integrations in hooks\12;;          (add-hook 'lsp-mode-hook 'lsp-ui-mode)\12;;          (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration))\12;;\12;;        (global-unset-key (kbd \"C-l\"))  ; Unbind C-l in global map\12;;        (setq lsp-keymap-prefix \"C-l\")   ; Set custom keymap prefix\12;;\12;;\12;;        ;; (use-package lsp-ui\12;;          ;; :ensure t\12;;          ;; :config\12;;          ;; (setq lsp-ui-sideline-enable t\12;;                ;; lsp-ui-doc-enable t\12;;                ;; lsp-ui-doc-delay 0.4\12;;                ;; lsp-ui-doc-show t\12;;                ;; lsp-ui-doc-show-with-cursor nil\12;;                ;; lsp-ui-doc-use-childframe t\12;;                ;; lsp-ui-peek-enable t\12;;                ;; lsp-ui-peek-show-directory t))\12;;\12;;        ;; You may remap xref-find-{definitions,references} (bound to M-. M-? by default):\12;;        ;; (define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)\12;;        ;; (define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)\12;;\12;;        (use-package company\12;;          :ensure t\12;;          :after (lsp-mode company-yasnippet)\12;;          :config\12;;  \11(add-hook 'after-init-hook 'global-company-mode)\12;;          (add-hook 'lsp-mode-hook 'company-mode)\12;;          (setq company-backends '((company-capf company-yasnippet))))  ; Add yasnippet to company backends\12;;\12;;    ;; (use-package company-box\12;;      ;; :ensure t\12;;      ;; :hook (company-mode . company-box-mode))\12;;\12;;    (use-package yasnippet\12;;          :ensure t\12;;          :config\12;;          (yas-reload-all)\12;;          (add-hook 'prog-mode-hook 'yas-minor-mode)\12;;          (add-hook 'text-mode-hook 'yas-minor-mode))\12;;        (yas-global-mode 1)  ; Enable yasnippet\12;;        (use-package yasnippet-snippets\12;;        :ensure t)\12" :post-blank 0 :post-affiliated 29402 :mode nil :granularity element :cached t :parent #183# :org-element--cache-sync-key nil)) 0] [nil nil #199=(section (:begin 31922 :end 33079 :contents-begin 31922 :contents-end 33079 :robust-begin 31922 :robust-end 33077 :post-blank 0 :post-affiliated 31922 :mode section :granularity element :cached t :parent #61# :org-element--cache-sync-key nil)) 0] #61# 0] (paragraph (:begin 29321 :end 29402 :contents-begin 29321 :contents-end 29402 :post-blank 0 :post-affiliated 29321 :mode nil :granularity element :cached t :parent #183# :org-element--cache-sync-key nil)) 0] (section (:begin 28998 :end 29202 :contents-begin 28998 :contents-end 29202 :robust-begin 28998 :robust-end 29200 :post-blank 0 :post-affiliated 28998 :mode section :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) 0] #56# 0] [[[[[nil nil #184# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 33107 :end 33243 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package sh-script\12    :hook\12    (sh-mode . flymake-mode)\12    (sh-mode . lsp-mode)) ;; optioinal\12" :post-blank 0 :post-affiliated 33107 :mode planning :granularity element :cached t :parent #185=(section (:begin 33107 :end 33243 :contents-begin 33107 :contents-end 33243 :robust-begin 33107 :robust-end 33241 :post-blank 0 :post-affiliated 33107 :mode section :granularity element :cached t :parent #184# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #185# 0] [[nil nil #187=(section (:begin 33287 :end 33379 :contents-begin 33287 :contents-end 33379 :robust-begin 33287 :robust-end 33377 :post-blank 0 :post-affiliated 33287 :mode section :granularity element :cached t :parent #186# :org-element--cache-sync-key nil)) 0] [nil nil #66# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 33287 :end 33379 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package wks-mode\12  :load-path (\"~/.emacs.d/manual/\"))\12" :post-blank 0 :post-affiliated 33287 :mode planning :granularity element :cached t :parent #187# :org-element--cache-sync-key nil)) 0] #186# 0] [[[nil nil #188# 0] [nil nil (paragraph (:begin 33784 :end 33813 :contents-begin 33784 :contents-end 33813 :post-blank 0 :post-affiliated 33784 :mode planning :granularity element :cached t :parent #189=(section (:begin 33784 :end 34711 :contents-begin 33784 :contents-end 34709 :robust-begin 33784 :robust-end 34707 :post-blank 2 :post-affiliated 33784 :mode section :granularity element :cached t :parent #188# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #189# 0] [[nil nil #190# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 34727 :end 34800 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package lua-mode\12    :ensure t)\12" :post-blank 1 :post-affiliated 34727 :mode planning :granularity element :cached t :parent #191=(section (:begin 34727 :end 34800 :contents-begin 34727 :contents-end 34799 :robust-begin 34727 :robust-end 34797 :post-blank 1 :post-affiliated 34727 :mode section :granularity element :cached t :parent #190# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #191# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 33813 :end 34155 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "   (use-package elpy\12     :ensure t\12     :init\12     (elpy-enable))\12\12  ;; (use-package envrc\12  ;;     :ensure t\12  ;;     :config (envrc-global-mode 1))\12\12     ;; sudo nala install pipx\12     ;; pipx install 'python-lsp-server[all]'\12\12     ;; pipx install ruff\12     ;; pipx install pylsp\12     ;; pipx install pyls\12" :post-blank 0 :post-affiliated 33813 :mode nil :granularity element :cached t :parent #189# :org-element--cache-sync-key nil)) 0] (section (:begin 33388 :end 33764 :contents-begin 33388 :contents-end 33763 :robust-begin 33388 :robust-end 33761 :post-blank 1 :post-affiliated 33388 :mode section :granularity element :cached t :parent #66# :org-element--cache-sync-key nil)) 0] [[[[nil nil #193=(section (:begin 34814 :end 35293 :contents-begin 34814 :contents-end 35293 :robust-begin 34814 :robust-end 35291 :post-blank 0 :post-affiliated 34814 :mode section :granularity element :cached t :parent #192# :org-element--cache-sync-key nil)) 0] [nil nil #80# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 34814 :end 35293 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\11;; (use-package lsp-nix\12\11;; :ensure lsp-mode\12\11;; :after (lsp-mode)\12\11;; :demand t\12\11;; :custom\12\11;; (lsp-nix-nil-formatter [\"nixfmt\"]))\12\12      ;; (use-package nix-mode\12\11;; :hook (nix-mode . lsp-deferred)\12\11;; :ensure t)\12  ;; for eglot\12  (use-package nix-mode\12    :ensure t)\12  (use-package eglot\12    :config\12    ;; Ensure `nil` is in your PATH.\12    (add-to-list 'eglot-server-programs '(nix-mode . (\"nil\")))\12    :hook\12    (nix-mode . eglot-ensure))\12\12" :post-blank 0 :post-affiliated 34814 :mode planning :granularity element :cached t :parent #193# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 35300 :end 35536 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ansi-color\12    :ensure t\12    :init\12    (defun my-compilation-filter ()\12      (ansi-color-apply-on-region (point-min) (point-max)))\12    :hook (compilation-filter . my-compilation-filter))\12" :post-blank 1 :post-affiliated 35300 :mode planning :granularity element :cached t :parent #195=(section (:begin 35300 :end 35536 :contents-begin 35300 :contents-end 35535 :robust-begin 35300 :robust-end 35533 :post-blank 1 :post-affiliated 35300 :mode section :granularity element :cached t :parent #80# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #194# -1] #195# 0] [[[[nil nil (paragraph (:begin 35572 :end 35604 :contents-begin 35572 :contents-end 35604 :post-blank 0 :post-affiliated 35572 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #196=(section (:begin 35572 :end 35865 :contents-begin 35572 :contents-end 35864 :robust-begin 35572 :robust-end 35862 :post-blank 1 :post-affiliated 35572 :mode section :granularity element :cached t :parent #194# :org-element--cache-sync-key nil)))) 0] [nil nil #73# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 35604 :end 35865 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value ";;(setq explicit-shell-file-name \"/run/current-system/sw/bin/fish\")\12;;(setq explicit-bash-args '(\"--login\" \"-i\"))\12;;(setq term-shell \"/run/current-system/sw/bin/fish\")\12;;(setq shell-file-name \"/run/current-system/sw/bin/fish\")\12" :post-blank 1 :post-affiliated 35604 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #196#)) 0] [nil nil #75# 0] #197# -1] [[nil nil (paragraph (:begin 35942 :end 36169 :contents-begin 35942 :contents-end 36169 :post-blank 0 :post-affiliated 35942 :mode planning :granularity element :cached t :parent #198=(section (:begin 35942 :end 43458 :contents-begin 35942 :contents-end 43458 :robust-begin 35942 :robust-end 43456 :post-blank 0 :post-affiliated 35942 :mode section :granularity element :cached t :parent #75# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters ":noexport" :begin 36236 :end 36409 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; do not format this\12  (setq denote-org-front-matter\12\"#+TITLE:      %s\12#+DATE:       %s\12#+FILETAGS:   %s\12#+IDENTIFIER: %s\12\\n\")\12" :post-blank 0 :post-affiliated 36236 :mode nil :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] (plain-list (:type unordered :begin 36169 :end 36236 :contents-begin 36169 :contents-end 36236 :structure ((36169 0 "- " nil nil nil 36236)) :post-blank 0 :post-affiliated 36169 :mode nil :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] #198# -1] #196# 1] #192# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 31922 :end 33079 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package eglot\12    :ensure t\12    :commands (eglot))\12\12;;  (add-hook 'python-mode-hook 'eglot-ensure)   ;; Python\12;;  (add-hook 'c-mode-hook 'eglot-ensure)        ;; C\12  (add-hook 'c++-mode-hook 'eglot-ensure)      ;; C++\12\12  (use-package company\12    :ensure t\12    :config\12    (add-hook 'eglot-managed-mode-hook 'company-mode)\12    (add-hook 'after-init-hook 'global-company-mode)) ;; TODO \12\12  (defvar eglot-prefix-map (make-sparse-keymap)\12    \"Keymap for Eglot commands.\")\12\12  ;; Bind eglot commands to your desired prefix\12  (define-key eglot-prefix-map (kbd \"d\") 'eglot-find-definition)      ;; C-l d for definition\12  (define-key eglot-prefix-map (kbd \"r\") 'eglot-find-reference)       ;; C-l r for references\12  (define-key eglot-prefix-map (kbd \"t\") 'eglot-find-type-definition) ;; C-l t for type definition\12  (define-key eglot-prefix-map (kbd \"d\") 'flymake-show-buffer-diagnostics) ;; C-l t for type definition\12\12\12  ;; Now bind the prefix key globally\12  (global-set-key (kbd \"C-l\") eglot-prefix-map)\12\12  ;; (fringe-mode 4)\12\12\12  ;; Disable corfu in python-mode\12  ;; (add-hook 'python-mode-hook (lambda () (corfu-mode -1)))\12" :post-blank 0 :post-affiliated 31922 :mode planning :granularity element :cached t :parent #199# :org-element--cache-sync-key nil)) 1] [[[[[[nil nil #200# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 43487 :end 43791 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package deft\12    :ensure t\12    :custom\12    (deft-directory \"~/denote/\")\12    (deft-extension '(\"txt\" \"org\" \"md\"))\12    (deft-use-filename-as-title t)\12    (deft-recursive t))\12  (global-set-key (kbd \"C-c n F\") 'deft)\12  (global-set-key (kbd \"C-c n m\") 'deft-find-file)\12" :post-blank 0 :post-affiliated 43487 :mode planning :granularity element :cached t :parent #201=(section (:begin 43487 :end 43791 :contents-begin 43487 :contents-end 43791 :robust-begin 43487 :robust-end 43789 :post-blank 0 :post-affiliated 43487 :mode section :granularity element :cached t :parent #200# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #201# 0] [[nil nil #203=(section (:begin 43803 :end 46008 :contents-begin 43803 :contents-end 46008 :robust-begin 43803 :robust-end 46006 :post-blank 0 :post-affiliated 43803 :mode section :granularity element :cached t :parent #77# :org-element--cache-sync-key nil)) 0] [nil nil #202# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 43803 :end 46008 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package org\12  \11:ensure t\12  \11:config (require 'org-tempo))\12    (setq org-return-follows-link t)  \12    (setq org-directory \"~/roam/org\"\12  \11    org-attach-directory \"~/roam/img/\"\12  \11    org-default-notes-file (expand-file-name \"notes.org\" org-directory)\12  \11    org-ellipsis \" ↴ \" ; ⇩ ▼ ↴\12  \11    ;; org-superstar-headline-bullets-list '(\"◉\" \"●\" \"○\" \"◆\" \"●\" \"○\" \"◆\")\12  \11    ;; org-superstar-itembullet-alist '((?+ . ?➤) (?- . ?✦)) ; changes +/- symbols in item lists\12  \11    org-log-done 'time\12  \11    org-hide-emphasis-markers t\12  \11    ;; ex. of org-link-abbrev-alist in action\12  \11    ;; [[arch-wiki:Name_of_Page][Description]]\12  \11    org-link-abbrev-alist    ; This overwrites the default Doom org-link-abbrev-list\12  \11      '((\"google\" . \"http://www.google.com/search?q=\")\12  \11\11(\"arch-wiki\" . \"https://wiki.archlinux.org/index.php/\")\12  \11\11(\"ddg\" . \"https://duckduckgo.com/?q=\")\12  \11\11(\"wiki\" . \"https://en.wikipedia.org/wiki/\"))\12  \11    org-table-convert-region-max-lines 20000\12  \11    org-todo-keywords        ; This overwrites the default Doom org-todo-keywords\12  \11      '((sequence\12  \11\11 \"TODO(t)\"           ; A task that is ready to be tackled\12  \11\11 \"BLOG(b)\"           ; Blog writing assignments\12  \11\11 \"GYM(g)\"            ; Things to accomplish at the gym\12  \11\11 \"PROJ(p)\"           ; A project that contains other tasks\12  \11\11 \"VIDEO(v)\"          ; Video assignments\12  \11\11 \"WAIT(w)\"           ; Something is holding up this task\12  \11\11 \"|\"                 ; The pipe necessary to separate \"active\" states and \"inactive\" states\12  \11\11 \"DONE(d)\"           ; Task has been completed\12  \11\11 \"CANCELLED(c)\"))) ; Task has been cancelled\12\12  ;; bro i add this because my org-roam-node not opening in Full screen\12  ;; https://emacs.stackexchange.com/questions/62720/open-org-link-in-the-same-window\12  \11(setq org-link-frame-setup\12     '((vm . vm-visit-folder-other-frame)\12  \11 (vm-imap . vm-visit-imap-folder-other-frame)\12  \11 (gnus . org-gnus-no-new-news)\12  \11 (file . find-file)\12  \11 (wl . wl-other-frame)))\12;; https://emacs.stackexchange.com/questions/46988/why-do-easy-templates-e-g-s-tab-in-org-9-2-not-work\12(add-to-list 'org-modules 'org-tempo t) ;; for complation like <s tab to src-block\12" :post-blank 0 :post-affiliated 43803 :mode planning :granularity element :cached t :parent #203# :org-element--cache-sync-key nil)) 0] #77# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46023 :end 46295 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq org-agenda-files (list \"~/roam/org/agenda.org\"))\12  (global-set-key (kbd \"C-c a\") 'org-agenda)\12  ;; open org-agenda-files\12  (global-set-key (kbd \"C-c o\")\12  \11\11(lambda ()\12  \11\11  (interactive)\12  \11\11  (find-file (car org-agenda-files))))\12" :post-blank 0 :post-affiliated 46023 :mode planning :granularity element :cached t :parent #208=(section (:begin 46023 :end 46295 :contents-begin 46023 :contents-end 46295 :robust-begin 46023 :robust-end 46293 :post-blank 0 :post-affiliated 46023 :mode section :granularity element :cached t :parent #202# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #207=(section (:begin 46316 :end 46529 :contents-begin 46316 :contents-end 46529 :robust-begin 46316 :robust-end 46527 :post-blank 0 :post-affiliated 46316 :mode section :granularity element :cached t :parent #204# :org-element--cache-sync-key nil)) 0] #204# 0] [[nil nil #205# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46548 :end 46732 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-download\12  :ensure t\12  :config\12  (setq org-download-image-dir \"~/roam/img/\")\12  (setq-default org-download-image-dir \"~/roam/img/\"))\12" :post-blank 0 :post-affiliated 46548 :mode planning :granularity element :cached t :parent #206=(section (:begin 46548 :end 46732 :contents-begin 46548 :contents-end 46732 :robust-begin 46548 :robust-end 46730 :post-blank 0 :post-affiliated 46548 :mode section :granularity element :cached t :parent #205# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #206# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46316 :end 46529 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package mixed-pitch\12  ;;   :ensure t\12  ;;   :hook\12  ;;   ;; If you want it in all text modes:\12  ;;   (text-mode . mixed-pitch-mode)\12  ;;   (org-mode . mixed-pitch-mode))\12" :post-blank 0 :post-affiliated 46316 :mode planning :granularity element :cached t :parent #207# :org-element--cache-sync-key nil)) 0] #208# 0] [[[[nil nil #210=(section (:begin 46744 :end 51188 :contents-begin 46744 :contents-end 51188 :robust-begin 46744 :robust-end 51186 :post-blank 0 :post-affiliated 46744 :mode section :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) 0] [nil nil #209# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 46744 :end 51188 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package org-roam\12    :ensure t\12    :custom\12    (org-roam-directory (file-truename \"~/roam/\"))\12    :bind ((\"C-c n l\" . org-roam-buffer-toggle)\12  \11 (\"C-c n f\" . org-roam-node-find)\12  \11 (\"C-c n g\" . org-roam-graph)\12  \11 (\"C-c n i\" . org-roam-node-insert)\12  \11 (\"C-c n c\" . org-roam-capture)\12  \11 (\"C-c n I\" . my/org-roam-node-insert-immediate)\12  \11 ;; Dailies\12  \11 (\"C-c n j\" . org-roam-dailies-capture-today)\12  \11 (\"C-c n d t\" . org-roam-dailies-goto-today)       ; Go to today's daily note\12  \11 (\"C-c n d y\" . org-roam-dailies-capture-yesterday) ; Capture yesterday's daily note\12  \11 (\"C-c n d Y\" . org-roam-dailies-goto-yesterday)    ; Go to yesterday's daily note\12  \11 (\"C-c n d T\" . org-roam-dailies-capture-tomorrow)  ; Capture tomorrow's daily note\12  \11 (\"C-c n d O\" . org-roam-dailies-goto-tomorrow)     ; Go to tomorrow's daily note\12  \11 (\"C-c n d d\" . org-roam-dailies-capture-date)      ; Capture a note for a specific date\12  \11 (\"C-c n d D\" . org-roam-dailies-goto-date)         ; Go to a note for a specific date\12  \11 (\"C-c n d n\" . org-roam-dailies-goto-next-note)    ; Go to next daily note\12  \11 (\"C-c n d p\" . org-roam-dailies-goto-previous-note) ; Go to previous daily note\12  \11 )\12\12    :config\12    (setq org-roam-dailies-directory \"daily/\") ;; set org roam journsl dir defult i daily/ you can any folder name (e.g) journal/\12    (setq org-roam-completion-everywhere t)\12    ;; If using org-roam-protocol\12    (require 'org-roam-protocol))\12  (setq org-roam-capture-templates\12        '((\"d\" \"default\" plain \"%?\"\12  \11 :target (file+head \"${slug}.org\"\12  \11\11\11    \"#+title: ${title}\\n#+filetags:\\n\")\12  \11 \12  \11 (setq org-roam-dailies-capture-templates\12  \11       '((\"d\" \"default\" entry \"* %<%I:%M %p>: %?\"\12  \11\11  :if-new (file+head \"%<%d-%m-%Y>.org\" \"#+title: %<%d-%m-%Y>\\n\"))))\12\12\12  \11 :unnarrowed t)))\12  (org-roam-db-autosync-mode)\12  (org-roam-db-sync)\12  ;;(add-hook 'org-open-at-point-functions #'org-roam-id-open) \12\12\12  ;; func\12  (defun my/org-roam-search ()\12    \"Search org-roam directory using consult-ripgrep. With live-preview.\"\12    (interactive)\12    (let ((consult-ripgrep-args \"rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number\"))\12      (consult-ripgrep org-roam-directory)))\12\12  (defun my/org-roam-search ()\12    \"Search org-roam directory using consult-ripgrep. With live-preview.\"\12    (interactive)\12    (let ((consult-ripgrep-args \"rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number\"))\12      (consult-ripgrep org-roam-directory)))\12\12\12  (defun my/org-roam-node-insert-immediate (arg &rest args)\12    (interactive \"P\")\12    (let ((args (cons arg args))\12  \11(org-roam-capture-templates (list (append (car org-roam-capture-templates)\12  \11\11\11\11\11\11  '(:immediate-finish t)))))\12      (apply #'org-roam-node-insert args)))\12\12\12  (defun my/org-roam-list-tags ()\12    \"List all unique tags from Org Roam notes in the minibuffer.\"\12    (interactive)\12    (if (not (bound-and-true-p org-roam-directory))\12        (error \"Org Roam directory is not set.\")\12      (let ((tags '()))\12        ;; Collect tags from Org Roam notes\12        (dolist (file (directory-files-recursively org-roam-directory \"\\\\.org$\"))\12  \11(with-temp-buffer\12  \11  (insert-file-contents file)\12  \11  (org-mode)\12  \11  (org-element-map (org-element-parse-buffer) 'headline\12  \11    (lambda (headline)\12  \11      (let ((headline-tags (org-element-property :tags headline)))\12  \11\11(when headline-tags\12  \11\11  (dolist (tag headline-tags)\12  \11\11    (unless (member tag tags)\12  \11\11      (push tag tags)))))))))\12        ;; Display the tags in the minibuffer\12        (message \"Unique Tags: %s\" (mapconcat 'identity (sort tags 'string<) \", \")))))\12\12  ;; this not working in gnu emacs\12  ;; (defun my/org-roam-list-tags ()\12  ;;   \"List all unique tags from Org Roam notes in a separate buffer.\"\12  ;;   (interactive)\12  ;;   (if (not (bound-and-true-p org-roam-directory))\12  ;;       (error \"Org Roam directory is not set.\")\12  ;;     (let ((tags '()))\12  ;;       ;; Collect tags from Org Roam notes\12  ;;       (dolist (file (directory-files-recursively org-roam-directory \"\\\\.org$\"))\12  ;; \11(with-temp-buffer\12  ;; \11  (insert-file-contents file)\12  ;; \11  (org-mode)\12  ;; \11  (org-element-map (org-element-parse-buffer) 'headline\12  ;; \11    (lambda (headline)\12  ;; \11      (let ((headline-tags (org-element-property :tags headline)))\12  ;; \11\11(setq tags (append tags headline-tags))))))))))\12\12" :post-blank 0 :post-affiliated 46744 :mode planning :granularity element :cached t :parent #210# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 51264 :end 51969 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(custom-set-faces\12   ;; Font sizes and colors for Org mode headers using Doom One theme colors\12   '(org-level-1 ((t (:height 1.4  :inherit outline-1 ultra-bold))))\12   '(org-level-2 ((t (:height 1.3  :inherit outline-2 extra-bold))))\12   '(org-level-3 ((t (:height 1.2  :inherit outline-3 bold))))\12   '(org-level-4 ((t (:height 1.0  :inherit outline-4 semi-bold))))\12   '(org-level-5 ((t (:height 1.0  :inherit outline-5 normal))))\12   '(org-level-6 ((t (:height 0.9  :inherit outline-6 normal))))\12   '(org-level-7 ((t (:height 0.9  :inherit outline-7 normal))))\12   '(org-level-8 ((t (:height 0.9  :inherit outline-8 normal))))\12   ;; Add more levels and colors as needed\12   )\12" :post-blank 0 :post-affiliated 51264 :mode planning :granularity element :cached t :parent #212=(section (:begin 51264 :end 51969 :contents-begin 51264 :contents-end 51969 :robust-begin 51264 :robust-end 51967 :post-blank 0 :post-affiliated 51264 :mode section :granularity element :cached t :parent #209# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #215=(section (:begin 51985 :end 52586 :contents-begin 51985 :contents-end 52586 :robust-begin 51985 :robust-end 52584 :post-blank 0 :post-affiliated 51985 :mode section :granularity element :cached t :parent #211# :org-element--cache-sync-key nil)) 0] #211# 0] #212# 0] [[nil nil #213# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 52595 :end 53137 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(with-eval-after-load 'ox-latex\12(add-to-list 'org-latex-classes\12             '(\"org-plain-latex\"\12               \"\\\\documentclass{article}\12           [NO-DEFAULT-PACKAGES]\12           [PACKAGES]\12           [EXTRA]\"\12               (\"\\\\section{%s}\" . \"\\\\section*{%s}\")\12               (\"\\\\subsection{%s}\" . \"\\\\subsection*{%s}\")\12               (\"\\\\subsubsection{%s}\" . \"\\\\subsubsection*{%s}\")\12               (\"\\\\paragraph{%s}\" . \"\\\\paragraph*{%s}\")\12               (\"\\\\subparagraph{%s}\" . \"\\\\subparagraph*{%s}\"))))\12" :post-blank 1 :post-affiliated 52595 :mode planning :granularity element :cached t :parent #214=(section (:begin 52595 :end 53137 :contents-begin 52595 :contents-end 53136 :robust-begin 52595 :robust-end 53134 :post-blank 1 :post-affiliated 52595 :mode section :granularity element :cached t :parent #213# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #87# -1] #214# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 51985 :end 52586 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package simple-httpd\12    :ensure t)\12\12  (use-package websocket\12    :ensure t)\12\12  (use-package org-roam-ui\12    :ensure t\12    :after org-roam\12    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have\12    ;;         a hookable mode anymore, you're advised to pick something yourself\12    ;;         if you don't care about startup time, use\12    ;;  :hook (after-init . org-roam-ui-mode)\12    :config\12    (setq org-roam-ui-sync-theme t\12\11  org-roam-ui-follow t\12\11  org-roam-ui-update-on-save t\12\11  org-roam-ui-open-on-start t))\12" :post-blank 0 :post-affiliated 51985 :mode planning :granularity element :cached t :parent #215# :org-element--cache-sync-key nil)) 0] #83# 0] [[[[[[nil nil #217=(section (:begin 53200 :end 54677 :contents-begin 53200 :contents-end 54676 :robust-begin 53200 :robust-end 54674 :post-blank 1 :post-affiliated 53200 :mode section :granularity element :cached t :parent #216# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 53572 :end 54677 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\11(use-package jinx  \12\11  :ensure t\12\11  :hook (emacs-startup . global-jinx-mode)\12  ;;        ;; :hook ((LaTeX-mode . jinx-mode)  \12  ;;    \11     ;; (latex-mode . jinx-mode)  \12  ;;    \11     ;; (markdown-mode . jinx-mode)  \12  ;;    \11     ;; (org-mode . jinx-mode)\12  ;;    \11     ;; (text-mode . jinx-mode)\12  ;;    \11     ;; )  \12  ;;        ;; :bind ([remap ispell-word] . jinx-correct)  \12\11 )\12  ;;    ;; (add-hook 'emacs-startup-hook #'global-jinx-mode)\12  ;;      ;; Jinx keybindings\12      (global-set-key (kbd \"C-c s s\") 'jinx-correct)\12      (global-set-key (kbd \"C-c s n\") 'jinx-next)\12      (global-set-key (kbd \"C-c s p\") 'jinx-previous)\12      (global-set-key (kbd \"C-c s l\") 'jinx-languages)\12      (global-set-key (kbd \"C-c s a\") 'jinx-correct-all)\12      (global-set-key (kbd \"C-c s w\") 'jinx-correct-word)\12      (global-set-key (kbd \"C-c s N\") 'jinx-correct-nearest)\12\12    ;; (use-package company-spell\12      ;; :config (push 'company-spell company-backends)\12      ;; :ensure t)\12    ;;  sudo nala install hunspell-en-us hunspell\12    ;; (setf company-spell-command \"hunspell\")\12" :post-blank 1 :post-affiliated 53572 :mode nil :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] (plain-list (:type unordered :begin 53200 :end 53572 :contents-begin 53200 :contents-end 53572 :structure ((53200 0 "- " nil nil nil 53248) (53248 0 "- " nil nil nil 53285) (53285 0 "- " nil nil nil 53333) (53333 0 "- " nil nil nil 53378) (53378 0 "- " nil nil nil 53422) (53422 0 "- " nil nil nil 53471) (53471 0 "- " nil nil nil 53518) (53518 0 "- " nil nil nil 53572)) :post-blank 0 :post-affiliated 53200 :mode planning :granularity element :cached t :parent #217# :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 54699 :end 54991 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package visual-fill-column\12  :ensure t\12  :hook (org-mode . visual-fill-column-mode)\12  :custom\12  (visual-fill-column-center-text t)\12  (visual-fill-column-width 110))\12\12(use-package visual-line-mode\12  :ensure nil\12  :hook\12  (org-mode . visual-line-mode))\12" :post-blank 1 :post-affiliated 54699 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #219=(section (:begin 54699 :end 54991 :contents-begin 54699 :contents-end 54990 :robust-begin 54699 :robust-end 54988 :post-blank 1 :post-affiliated 54699 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #218#)))) 0] #219# 1] #218# 0] [[nil nil #221=(section (:begin 55004 :end 56211 :contents-begin 55004 :contents-end 56210 :robust-begin 55004 :robust-end 56208 :post-blank 1 :post-affiliated 55004 :mode section :granularity element :cached t :parent #220# :org-element--cache-sync-key nil)) 0] [nil nil #93# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 55004 :end 56211 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (setq redisplay-dont-pause t) ;; Avoid pausing between updates\12\12  (defun my/display-startup-time ()\12  (message \"Emacs loaded in %s with %d garbage collections.\"\12           (format \"%.2f seconds\"\12                   (float-time\12                   (time-subtract after-init-time before-init-time)))\12           gcs-done))\12\12(add-hook 'emacs-startup-hook #'my/display-startup-time)\12\12     ;; Using garbage magic hack.\12    (use-package gcmh\12      :ensure t\12      :config\12      (gcmh-mode 1))\12   ;; Setting garbage collection threshold\12  (setq gc-cons-threshold 402653184  ;; Set to 384MB (402,653,184 bytes)\12       gc-cons-percentage 0.6)      ;; Set the proportion of memory to trigger GC\12\12   ;; Profile emacs startup\12   (add-hook 'emacs-startup-hook\12             (lambda ()\12               (message \"*** Emacs loaded in %s with %d garbage collections.\"\12                        (format \"%.2f seconds\"\12                                (float-time\12                                 (time-subtract after-init-time before-init-time)))\12                        gcs-done)))\12\12   ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)\12" :post-blank 1 :post-affiliated 55004 :mode planning :granularity element :cached t :parent #221# :org-element--cache-sync-key nil)) 0] #220# -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 56259 :end 56501 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package perspective\12  ;;   :ensure t\12  ;;   :bind ((\"C-x k\" . persp-kill-buffer*))\12  ;;   :init\12  ;;   (setq persp-mode-prefix-key (kbd \"C-x ,\"))  ; Set your desired prefix key\12  ;;   (persp-mode))\12" :post-blank 1 :post-affiliated 56259 :mode planning :granularity element :cached t :parent #224=(section (:begin 56259 :end 56501 :contents-begin 56259 :contents-end 56500 :robust-begin 56259 :robust-end 56498 :post-blank 1 :post-affiliated 56259 :mode section :granularity element :cached t :parent #93# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #223=(section (:begin 56559 :end 57407 :contents-begin 56559 :contents-end 57406 :robust-begin 56559 :robust-end 57404 :post-blank 1 :post-affiliated 56559 :mode section :granularity element :cached t :parent #222# :org-element--cache-sync-key nil)) 0] #222# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 56609 :end 57407 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package consult\12  ;;   :ensure t\12  ;;   :config\12  ;;   ;; Hide the default consult buffer source\12  ;;   (consult-customize consult--source-buffer :hidden t :default nil)\12\12  ;;   ;; Define the custom source for perspectives\12  ;;   (defvar consult--source-perspective\12  ;;     (list :name     \"Perspective\"\12  ;;           :narrow   ?s\12  ;;           :category 'buffer\12  ;;           :state    #'consult--buffer-state\12  ;;           :default  t\12  ;;           :items    #'persp-get-buffer-names))\12\12  ;;   ;; Add the perspective source to consult-buffer-sources\12  ;;   (unless (boundp 'consult-buffer-sources)\12  ;;     (setq consult-buffer-sources '()))  ;; Initialize if not defined\12  ;;   (add-to-list 'consult-buffer-sources consult--source-perspective))\12" :post-blank 1 :post-affiliated 56609 :mode nil :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] [nil nil #236=(section (:begin 57422 :end 58712 :contents-begin 57422 :contents-end 58710 :robust-begin 57422 :robust-end 58708 :post-blank 2 :post-affiliated 57422 :mode section :granularity element :cached t :parent #100# :org-element--cache-sync-key nil)) 0] #100# 0] (paragraph (:begin 56559 :end 56609 :contents-begin 56559 :contents-end 56609 :post-blank 0 :post-affiliated 56559 :mode planning :granularity element :cached t :parent #223# :org-element--cache-sync-key nil)) 0] #224# -1] [[[[nil nil #225# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 58768 :end 59627 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; ;; Filter Buffers for Consult-Buffer\12  ;; (with-eval-after-load 'consult\12  ;;   ;; hide full buffer list (still available with \"b\" prefix)\12  ;;   (consult-customize consult--source-buffer :hidden t :default nil)\12  ;;   ;; set consult-workspace buffer list\12  ;;   (defvar consult--source-workspace\12  ;;     (list :name     \"Workspace Buffers\"\12  ;;           :narrow   ?w\12  ;;           :history  'buffer-name-history\12  ;;           :category 'buffer\12  ;;           :state    #'consult--buffer-state\12  ;;           :default  t\12  ;;           :items    (lambda () (consult--buffer-query\12  ;; \11\11\11\11:predicate #'tabspaces--local-buffer-p\12  ;; \11\11\11\11:sort 'visibility\12  ;; \11\11\11\11:as #'buffer-name)))\12\12  ;;     \"Set workspace buffer list for consult-buffer.\")\12  ;;   (add-to-list 'consult-buffer-sources 'consult--source-workspace))\12" :post-blank 0 :post-affiliated 58768 :mode planning :granularity element :cached t :parent #226=(section (:begin 58768 :end 59627 :contents-begin 58768 :contents-end 59627 :robust-begin 58768 :robust-end 59625 :post-blank 0 :post-affiliated 58768 :mode section :granularity element :cached t :parent #225# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #226# 0] [[nil nil #229=(section (:begin 59659 :end 60919 :contents-begin 59659 :contents-end 60918 :robust-begin 59659 :robust-end 60916 :post-blank 1 :post-affiliated 59659 :mode section :granularity element :cached t :parent #227# :org-element--cache-sync-key nil)) 0] [nil nil #228# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 59659 :end 60919 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (use-package beframe\12      :ensure t)\12\12    (setq beframe-global-buffers '(\"*scratch*\" \"*Messages*\" \"*Backtrace*\"))\12    (beframe-mode 1)\12\12\12  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\12  ;; (defvar consult-buffer-sources)\12  ;; (declare-function consult--buffer-state \"consult\")\12\12  ;; (with-eval-after-load 'consult\12  ;;   (defface beframe-buffer\12  ;;     '((t :inherit font-lock-string-face))\12  ;;     \"Face for `consult' framed buffers.\")\12\12  ;;   (defun my-beframe-buffer-names-sorted (&optional frame)\12  ;;     \"Return the list of buffers from `beframe-buffer-names' sorted by visibility.\12  ;; With optional argument FRAME, return the list of buffers of FRAME.\"\12  ;;     (beframe-buffer-names frame :sort #'beframe-buffer-sort-visibility))\12\12  ;;   (defvar beframe-consult-source\12  ;;     `( :name     \"Frame-specific buffers (current frame)\"\12  ;;        :narrow   ?F\12  ;;        :category buffer\12  ;;        :face     beframe-buffer\12  ;;        :history  beframe-history\12  ;;        :items    ,#'my-beframe-buffer-names-sorted\12  ;;        :action   ,#'switch-to-buffer\12  ;;        :state    ,#'consult--buffer-state))\12\12  ;;   (add-to-list 'consult-buffer-sources 'beframe-consult-source))\12" :post-blank 1 :post-affiliated 59659 :mode planning :granularity element :cached t :parent #229# :org-element--cache-sync-key nil)) 0] #227# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 60935 :end 61589 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; (use-package keycast\12    ;;   :ensure t)\12\12  (use-package keycast\12    :ensure t\12    :bind (\"C-c t k\" . +toggle-keycast)\12    :config\12    (defun +toggle-keycast()\12      (interactive)\12      (if (member '(\"\" keycast-mode-line \" \") global-mode-string)\12          (progn (setq global-mode-string (delete '(\"\" keycast-mode-line \" \") global-mode-string))\12                 (remove-hook 'pre-command-hook 'keycast--update)\12                 (message \"Keycast OFF\"))\12        (add-to-list 'global-mode-string '(\"\" keycast-mode-line \" \"))\12        (add-hook 'pre-command-hook 'keycast--update t)\12        (message \"Keycast ON\"))))\12" :post-blank 1 :post-affiliated 60935 :mode planning :granularity element :cached t :parent #235=(section (:begin 60935 :end 61589 :contents-begin 60935 :contents-end 61588 :robust-begin 60935 :robust-end 61586 :post-blank 1 :post-affiliated 60935 :mode section :granularity element :cached t :parent #228# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #231=(section (:begin 61604 :end 62894 :contents-begin 61604 :contents-end 62893 :robust-begin 61604 :robust-end 62891 :post-blank 1 :post-affiliated 61604 :mode section :granularity element :cached t :parent #230# :org-element--cache-sync-key nil)) 0] #230# 0] [[nil nil (paragraph (:begin 61619 :end 61802 :contents-begin 61619 :contents-end 61802 :post-blank 0 :post-affiliated 61619 :mode nil :granularity element :cached t :parent #231# :org-element--cache-sync-key nil)) 0] [nil nil #232# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 61802 :end 62894 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package erc\12    :ensure t)\12    (setq erc-server \"irc.libera.chat\"\12\11  erc-nick \"zherka\"    ; Change this!\12\11  erc-user-full-name \"Emacs User\"  ; And this!\12\11  erc-track-shorten-start 8\12\11  erc-autojoin-channels-alist '((\"irc.libera.chat\" \"#systemcrafters\" \"#emacs\"))\12\11  erc-kill-buffer-on-part t\12\11  erc-auto-query 'bury)\12\12    (setq erc-fill-column 120\12\11  erc-fill-function 'erc-fill-static\12\11  erc-fill-static-center 20)\12\12    ;; Uniquely colorizing nicknames in chat\12    (use-package erc-hl-nicks\12      :ensure t\12      :after erc\12      :config\12      (add-to-list 'erc-modules 'hl-nicks))\12    ;; You might need to run M-: (erc-update-modules) after running this in an existing Emacs session!\12\12\12    ;; Displaying inline images\12    (use-package erc-image\12      :ensure t\12      :after erc\12      :config\12      (setq erc-image-inline-rescale 300)\12      (add-to-list 'erc-modules 'image))\12\12\12    ;; Displaying emojis in messages\12    ;; Use emojify-mode:\12    (use-package emojify\12      :ensure t\12      :hook (erc-mode . emojify-mode)\12      :commands emojify-mode)\12\12" :post-blank 1 :post-affiliated 61802 :mode nil :granularity element :cached t :parent #231# :org-element--cache-sync-key nil)) 0] (plain-list (:type unordered :begin 61604 :end 61619 :contents-begin 61604 :contents-end 61619 :structure ((61604 0 "- " nil nil nil 61619)) :post-blank 0 :post-affiliated 61604 :mode planning :granularity element :cached t :parent #231# :org-element--cache-sync-key nil)) 0] [[nil nil #234=(section (:begin 63405 :end 63734 :contents-begin 63405 :contents-end 63732 :robust-begin 63405 :robust-end 63730 :post-blank 2 :post-affiliated 63405 :mode section :granularity element :cached t :parent #233# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 63436 :end 63443 :contents-begin 63436 :contents-end 63443 :post-blank 0 :post-affiliated 63436 :mode nil :granularity element :cached t :parent #234# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 63592 :end 63734 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq ispell-program-name \"aspell\"\12           ispell-extra-args '(\"--sug-mode=ultra\" \"--run-together\"))\12\12" :post-blank 2 :post-affiliated 63592 :mode nil :granularity element :cached t :parent #234# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 63443 :end 63592 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value " (require 'tramp-sh)\12 (setq tramp-remote-path\12       (append tramp-remote-path\12  \11       '(tramp-own-remote-path)))\12" :post-blank 0 :post-affiliated 63443 :mode nil :granularity element :cached t :parent #234# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 63405 :end 63436 :contents-begin 63405 :contents-end 63435 :post-blank 1 :post-affiliated 63405 :mode planning :granularity element :cached t :parent #234# :org-element--cache-sync-key nil)) 1] #233# 0] #235# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 57422 :end 58712 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package tab-bar\12  ;;   :ensure t\12  ;;   :init\12  ;;   (setq tab-bar-height 30\12  ;;         ;; tab-bar-new-tab-choice \"*dashboard*\"\12  ;;         tab-bar-show 1\12  ;;         ;; tab-bar-close-button-show nil\12  ;;         tab-bar-select-tab-modifiers '(meta) ;; set to alt + 1-9\12  ;;         tab-bar-tab-hints t)\12  ;;   :config\12  ;;   (tab-bar-mode 1)  ; Activate tab bar mode\12  ;;   (run-at-time \"1 sec\" nil\12  ;;                (lambda ()\12  ;; \11\11 (set-face-attribute 'tab-bar nil :font \"Monospace-12\")))) ;; set font size for tab-bar-mode\12\12  ;; (use-package tabspaces\12  ;;   :ensure t\12  ;;   :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. \12  ;;   :commands (tabspaces-switch-or-create-workspace\12  ;;              tabspaces-open-or-create-project-and-workspace)\12  ;;   :custom\12  ;;   (tabspaces-use-filtered-buffers-as-default t)\12  ;;   (tabspaces-default-tab \"Default\")\12  ;;   (tabspaces-remove-to-default t)\12  ;;   (tabspaces-include-buffers '(\"*scratch*\"))\12  ;;   (tabspaces-initialize-project-with-todo t)\12  ;;   (tabspaces-todo-file-name \"project-todo.org\")\12  ;;   ;; sessions\12  ;;   (tabspaces-session t)\12  ;;   (tabspaces-session-auto-restore t)\12  ;;   (tab-bar-new-tab-choice \"*scratch*\"))\12" :post-blank 2 :post-affiliated 57422 :mode planning :granularity element :cached t :parent #236# :org-element--cache-sync-key nil)) 0] #216# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 36409 :end 43458 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; migerate all org roam notes to denote\12  ;; (load-file \"~/.emacs.d/manual/nm-org-roam-to-denote.el\")\12\12  (use-package denote\12    :ensure t)\12  ;; Remember to check the doc strings of those variables.\12  (setq denote-directory (expand-file-name \"~/denote/\"))\12  (setq denote-known-keywords '(\"emacs\" \"philosophy\" \"politics\" \"economics\"))\12  (setq denote-infer-keywords t)\12  (setq denote-sort-keywords t)\12  (setq denote-file-type nil) ; Org is the default, set others here\12  (setq denote-prompts '(subdirectory title keywords))\12  (setq denote-excluded-directories-regexp nil)\12  (setq denote-excluded-keywords-regexp nil)\12  (setq denote-rename-confirmations '(rewrite-front-matter modify-file-name))\12  (setq denote-save-buffer t)\12  ;; Pick dates, where relevant, with Org's advanced interface:\12  (setq denote-date-prompt-use-org-read-date t)\12\12  ;; Read this manual for how to specify `denote-templates'.  We do not\12  ;; include an example here to avoid potential confusion.\12\12  (setq denote-date-format nil) ; read doc string\12\12  ;; By default, we do not show the context of links.  We just display\12  ;; file names.  This provides a more informative view.\12  (setq denote-backlinks-show-context t)\12\12  ;; Also see `denote-link-backlinks-display-buffer-action' which is a bit\12  ;; advanced.\12\12  ;; If you use Markdown or plain text files (Org renders links as buttons\12  ;; right away)\12  (add-hook 'text-mode-hook #'denote-fontify-links-mode-maybe)\12\12  ;; We use different ways to specify a path for demo purposes.\12  ;; (setq denote-dired-directories\12  ;;       (list denote-directory\12  ;;             (thread-last denote-directory (expand-file-name \"attachments\"))\12  ;;             (expand-file-name \"~/Documents/books\")))\12\12  ;; Generic (great if you rename files Denote-style in lots of places):\12  ;; (add-hook 'dired-mode-hook #'denote-dired-mode)\12  ;;\12  ;; OR if only want it in `denote-dired-directories':\12  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)\12\12\12  ;; Automatically rename Denote buffers using the `denote-rename-buffer-format'.\12  (denote-rename-buffer-mode 1)\12\12  ;; Denote DOES NOT define any key bindings.  This is for the user to\12  ;; decide.  For example:\12  (let ((map global-map))\12    (define-key map (kbd \"C-c d n\") #'denote)\12    (define-key map (kbd \"C-c d c\") #'denote-region) ; \"contents\" mnemonic\12    (define-key map (kbd \"C-c d N\") #'denote-type)\12    (define-key map (kbd \"C-c d d\") #'denote-date)\12    (define-key map (kbd \"C-c d z\") #'denote-signature) ; \"zettelkasten\" mnemonic\12    (define-key map (kbd \"C-c d s\") #'denote-subdirectory)\12    (define-key map (kbd \"C-c d t\") #'denote-template)\12    ;; If you intend to use Denote with a variety of file types, it is\12    ;; easier to bind the link-related commands to the `global-map', as\12    ;; shown here.  Otherwise follow the same pattern for `org-mode-map',\12    ;; `markdown-mode-map', and/or `text-mode-map'.\12    (define-key map (kbd \"C-c d i\") 'denote-link-or-create) ; \"insert\" mnemonic\12    (define-key map (kbd \"C-c d I\") #'denote-add-links)\12    (define-key map (kbd \"C-c d b\") #'denote-backlinks)\12    (define-key map (kbd \"C-c d f f\") #'denote-find-link)\12    (define-key map (kbd \"C-c d f b\") #'denote-find-backlink)\12    ;; Note that `denote-rename-file' can work from any context, not just\12    ;; Dired bufffers.  That is why we bind it here to the `global-map'.\12    (define-key map (kbd \"C-c d r\") #'denote-rename-file)\12    (define-key map (kbd \"C-c d R\") #'denote-rename-file-using-front-matter))\12\12  ;; Key bindings specifically for Dired.\12  (let ((map dired-mode-map))\12    (define-key map (kbd \"C-c C-d C-i\") #'denote-link-dired-marked-notes)\12    (define-key map (kbd \"C-c C-d C-r\") #'denote-dired-rename-files)\12    (define-key map (kbd \"C-c C-d C-k\") #'denote-dired-rename-marked-files-with-keywords)\12    (define-key map (kbd \"C-c C-d C-R\") #'denote-dired-rename-marked-files-using-front-matter))\12\12  (with-eval-after-load 'org-capture\12    (setq denote-org-capture-specifiers \"%l\\n%i\\n%?\")\12    (add-to-list 'org-capture-templates\12\11\11 '(\"n\" \"New note (with denote.el)\" plain\12\11\11   (file denote-last-path)\12\11\11   #'denote-org-capture\12\11\11   :no-save t\12\11\11   :immediate-finish nil\12\11\11   :kill-buffer t\12\11\11   :jump-to-captured t)))\12\12  ;; Also check the commands `denote-link-after-creating',\12  ;; `denote-link-or-create'.  You may want to bind them to keys as well.\12\12\12  ;; If you want to have Denote commands available via a right click\12  ;; context menu, use the following and then enable\12  ;; `context-menu-mode'.\12  (add-hook 'context-menu-functions #'denote-context-menu)\12\12  (use-package denote-menu\12    :ensure t)\12  (setq denote-menu-title-column-width 60) ;; <-- default is 85\12  (setq denote-menu-date-column-width 17)         ; Set to 17\12  (setq denote-menu-signature-column-width 10)    ; Set to 10\12  (setq denote-menu-keywords-column-width 30)      ; Set to 30\12\12  (global-set-key (kbd \"C-c z\") #'list-denotes)\12\12  (define-key denote-menu-mode-map (kbd \"c\") #'denote-menu-clear-filters)\12  (define-key denote-menu-mode-map (kbd \"f\") #'denote-menu-filter)\12  (define-key denote-menu-mode-map (kbd \"k\") #'denote-menu-filter-by-keyword)\12  (define-key denote-menu-mode-map (kbd \"o\") #'denote-menu-filter-out-keyword)\12  (define-key denote-menu-mode-map (kbd \"e\") #'denote-menu-export-to-dired)\12  (define-key denote-menu-mode-map (kbd \"l\") #'my-denote-list-all-keywords)\12  (define-key denote-menu-mode-map (kbd \"s\") #'denote-menu-filter-subdir)\12  (define-key global-map (kbd \"C-c d l\") #'my-denote-list-all-keywords)\12\12  (defun denote-menu-filter-subdir (subdir)\12  \"Filter `denote-menu' entries to files within SUBDIR.\12SUBDIR is chosen interactively relative to `denote-directory'.\"\12  (interactive\12   (list (read-directory-name \"Choose subdirectory: \" denote-directory)))\12  (let* ((absolute-subdir (expand-file-name subdir))\12         (matching-files (seq-filter\12                          (lambda (file)\12                            (string-prefix-p absolute-subdir (file-name-directory file)))\12                          (denote-directory-files))))\12    (setq tabulated-list-entries\12          (lambda ()\12            (mapcar #'denote-menu--path-to-entry matching-files)))\12    (revert-buffer)))\12\12\12  ;; list all the keywords = #+FILETAGS\12  (defun my-denote-list-all-keywords ()\12    \"List all unique keywords used in Denote files and show them in message buffer.\"\12    (interactive)\12    (let* ((files (directory-files (denote-directory) t \"\\\\..*$\"))\12\11   (all-keywords '()))\12      (dolist (file files)\12\11(when-let ((keywords (denote-retrieve-filename-keywords file)))\12\11\11(setq all-keywords \12\11\11(append all-keywords \12\11\11\11;; Split by -- to get each keyword group\12\11\11\11(mapcar (lambda (kw)\12\11\11\11\11\11;; Split each keyword group by underscore\12\11\11\11\11\11(split-string \12\11\11\11\11\11 (replace-regexp-in-string \"_\" \" \" kw) \12\11\11\11\11\11 \" \" t))\12\11\11\11\11(split-string keywords \"--\" t))))))\12      (message \"All keywords: %s\" \12\11       (string-join \12\11\11(delete-dups \12\11\11 (sort \12\11\11\11(cl-remove-duplicates \12\11\11   (flatten-list all-keywords)\12\11\11   :test #'string-equal)\12\11\11\11#'string-lessp))\12\11\11\", \"))))\12\12\12" :post-blank 0 :post-affiliated 36409 :mode nil :granularity element :cached t :parent #198# :org-element--cache-sync-key nil)) 0] #169# 0] nil nil 0] org-element--cache-compare)))